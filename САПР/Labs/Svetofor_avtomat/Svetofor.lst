;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 06.02.2021 15:58:30
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0x0202E5  	LJMP 741
0x0003	0x0202C7  	LJMP 711
0x0006	0x00      	NOP
0x0007	0x00      	NOP
0x0008	0x00      	NOP
0x0009	0x00      	NOP
0x000A	0x00      	NOP
0x000B	0x020000  	LJMP 0
0x000E	0x00      	NOP
0x000F	0x00      	NOP
0x0010	0x00      	NOP
0x0011	0x00      	NOP
0x0012	0x00      	NOP
0x0013	0x020000  	LJMP 0
0x0016	0x00      	NOP
0x0017	0x00      	NOP
0x0018	0x00      	NOP
0x0019	0x00      	NOP
0x001A	0x00      	NOP
0x001B	0x020296  	LJMP 662
0x001E	0x00      	NOP
0x001F	0x00      	NOP
0x0020	0x00      	NOP
0x0021	0x00      	NOP
0x0022	0x00      	NOP
0x0023	0x020000  	LJMP 0
_translate:
;Drv.c,84 :: 		unsigned char translate(unsigned char c){
;Drv.c,85 :: 		switch (c){
0x0026	0x8018    	SJMP L_translate30
;Drv.c,93 :: 		case 'Ж': return 0xA3;
L_translate32:
0x0028	0x78A3    	MOV R0, #163
0x002A	0x22      	RET
;Drv.c,94 :: 		case 'З': return 0xA4;
L_translate33:
0x002B	0x78A4    	MOV R0, #164
0x002D	0x22      	RET
;Drv.c,97 :: 		case 'К': return 'K';
L_translate34:
0x002E	0x784B    	MOV R0, #75
0x0030	0x22      	RET
;Drv.c,126 :: 		case 'ж': return 0xB6;
L_translate35:
0x0031	0x78B6    	MOV R0, #182
0x0033	0x22      	RET
;Drv.c,127 :: 		case 'з': return 0xB7;
L_translate36:
0x0034	0x78B7    	MOV R0, #183
0x0036	0x22      	RET
;Drv.c,136 :: 		case 'р': return 'p';
L_translate37:
0x0037	0x7870    	MOV R0, #112
0x0039	0x22      	RET
;Drv.c,137 :: 		case 'с': return 'c';
L_translate38:
0x003A	0x7863    	MOV R0, #99
0x003C	0x22      	RET
;Drv.c,152 :: 		default: return c;
L_translate39:
0x003D	0xA812    	MOV R0, FARG_translate_c
0x003F	0x22      	RET
;Drv.c,153 :: 		}
L_translate30:
0x0040	0xE512    	MOV A, FARG_translate_c
0x0042	0x64C6    	XRL A, #198
0x0044	0x60E2    	JZ L_translate32
0x0046	0xE512    	MOV A, FARG_translate_c
0x0048	0x64C7    	XRL A, #199
0x004A	0x60DF    	JZ L_translate33
0x004C	0xE512    	MOV A, FARG_translate_c
0x004E	0x64CA    	XRL A, #202
0x0050	0x60DC    	JZ L_translate34
0x0052	0xE512    	MOV A, FARG_translate_c
0x0054	0x64E6    	XRL A, #230
0x0056	0x60D9    	JZ L_translate35
0x0058	0xE512    	MOV A, FARG_translate_c
0x005A	0x64E7    	XRL A, #231
0x005C	0x60D6    	JZ L_translate36
0x005E	0xE512    	MOV A, FARG_translate_c
0x0060	0x64F0    	XRL A, #240
0x0062	0x60D3    	JZ L_translate37
0x0064	0xE512    	MOV A, FARG_translate_c
0x0066	0x64F1    	XRL A, #241
0x0068	0x60D0    	JZ L_translate38
0x006A	0x80D1    	SJMP L_translate39
;Drv.c,154 :: 		}
0x006C	0x22      	RET
; end of _translate
_outd:
;Drv.c,195 :: 		void outd(unsigned char c){
;Drv.c,197 :: 		c=translate(c);
0x006D	0x850E12  	MOV FARG_translate_c, FARG_outd_c+0
0x0070	0x1126    	ACALL _translate
0x0072	0x85000E  	MOV FARG_outd_c, 0
;Drv.c,198 :: 		RS = 1;
0x0075	0xD3      	SETB C
0x0076	0xE5B0    	MOV A, P3_6_bit
0x0078	0x92E6    	MOV #224.B6, C
0x007A	0xF5B0    	MOV P3_6_bit, A
;Drv.c,199 :: 		DB = c;
0x007C	0x8500A0  	MOV P2, 0
;Drv.c,200 :: 		E = 1;
0x007F	0xD3      	SETB C
0x0080	0xE5B0    	MOV A, P3_7_bit
0x0082	0x92E7    	MOV #224.B7, C
0x0084	0xF5B0    	MOV P3_7_bit, A
;Drv.c,201 :: 		E = 2;
0x0086	0xC3      	CLR C
0x0087	0xE5B0    	MOV A, P3_7_bit
0x0089	0x92E7    	MOV #224.B7, C
0x008B	0xF5B0    	MOV P3_7_bit, A
;Drv.c,202 :: 		for (i=0; i<21; i++);
0x008D	0x750F00  	MOV outd_i_L0, #0
L_outd52:
0x0090	0xC3      	CLR C
0x0091	0xE50F    	MOV A, outd_i_L0
0x0093	0x9415    	SUBB A, #21
0x0095	0x5004    	JNC L_outd53
0x0097	0x050F    	INC outd_i_L0
0x0099	0x80F5    	SJMP L_outd52
L_outd53:
;Drv.c,203 :: 		}
0x009B	0x22      	RET
; end of _outd
_DelayMs:
;Svetofor.c,125 :: 		void DelayMs(unsigned int m){  // задержка по таймеру
;Svetofor.c,128 :: 		ms=0;
0x009C	0x753300  	MOV _ms, #0
0x009F	0x753400  	MOV _ms+1, #0
;Svetofor.c,129 :: 		WMCON.WDTRST=1; // сброс сторожевого таймера
0x00A2	0xD3      	SETB C
0x00A3	0xE596    	MOV A, WMCON
0x00A5	0x92E1    	MOV #224.B1, C
0x00A7	0xF596    	MOV WMCON, A
;Svetofor.c,130 :: 		while(ms!=m) continue;
L_DelayMs46:
0x00A9	0xE533    	MOV A, _ms
0x00AB	0x650E    	XRL A, FARG_DelayMs_m
0x00AD	0x7004    	JNZ L__DelayMs50
0x00AF	0xE534    	MOV A, _ms+1
0x00B1	0x650F    	XRL A, FARG_DelayMs_m+1
L__DelayMs50:
0x00B3	0x6002    	JZ L_DelayMs47
0x00B5	0x80F2    	SJMP L_DelayMs46
L_DelayMs47:
;Svetofor.c,131 :: 		}
0x00B7	0x22      	RET
; end of _DelayMs
_outcw:
;Drv.c,183 :: 		void outcw(unsigned char c){
;Drv.c,186 :: 		RS = 0;
0x00B8	0xC3      	CLR C
0x00B9	0xE5B0    	MOV A, P3_6_bit
0x00BB	0x92E6    	MOV #224.B6, C
0x00BD	0xF5B0    	MOV P3_6_bit, A
;Drv.c,187 :: 		DB = c;
0x00BF	0x850EA0  	MOV P2, FARG_outcw_c+0
;Drv.c,188 :: 		E = 1;
0x00C2	0xD3      	SETB C
0x00C3	0xE5B0    	MOV A, P3_7_bit
0x00C5	0x92E7    	MOV #224.B7, C
0x00C7	0xF5B0    	MOV P3_7_bit, A
;Drv.c,189 :: 		E = 2;
0x00C9	0xC3      	CLR C
0x00CA	0xE5B0    	MOV A, P3_7_bit
0x00CC	0x92E7    	MOV #224.B7, C
0x00CE	0xF5B0    	MOV P3_7_bit, A
;Drv.c,190 :: 		for (i=0; i<20; i++);
0x00D0	0x750F00  	MOV outcw_i_L0, #0
L_outcw43:
0x00D3	0xC3      	CLR C
0x00D4	0xE50F    	MOV A, outcw_i_L0
0x00D6	0x9414    	SUBB A, #20
0x00D8	0x5004    	JNC L_outcw44
0x00DA	0x050F    	INC outcw_i_L0
0x00DC	0x80F5    	SJMP L_outcw43
L_outcw44:
;Drv.c,191 :: 		if (c==1||c==2||c==3)
0x00DE	0xE50E    	MOV A, FARG_outcw_c
0x00E0	0x6401    	XRL A, #1
0x00E2	0x600E    	JZ L__outcw55
0x00E4	0xE50E    	MOV A, FARG_outcw_c
0x00E6	0x6402    	XRL A, #2
0x00E8	0x6008    	JZ L__outcw55
0x00EA	0xE50E    	MOV A, FARG_outcw_c
0x00EC	0x6403    	XRL A, #3
0x00EE	0x6002    	JZ L__outcw55
0x00F0	0x801F    	SJMP L_outcw48
L__outcw55:
;Drv.c,192 :: 		for (j=0; j<500; j++);
0x00F2	0x751000  	MOV outcw_j_L0, #0
0x00F5	0x751100  	MOV outcw_j_L0+1, #0
L_outcw49:
0x00F8	0xC3      	CLR C
0x00F9	0xE510    	MOV A, outcw_j_L0
0x00FB	0x94F4    	SUBB A, #244
0x00FD	0xE511    	MOV A, outcw_j_L0+1
0x00FF	0x9401    	SUBB A, #1
0x0101	0x500E    	JNC L_outcw50
0x0103	0x7401    	MOV A, #1
0x0105	0x2510    	ADD A, outcw_j_L0
0x0107	0xF510    	MOV outcw_j_L0, A
0x0109	0x7400    	MOV A, #0
0x010B	0x3511    	ADDC A, outcw_j_L0+1
0x010D	0xF511    	MOV outcw_j_L0+1, A
0x010F	0x80E7    	SJMP L_outcw49
L_outcw50:
L_outcw48:
;Drv.c,193 :: 		}
0x0111	0x22      	RET
; end of _outcw
_rd_EEPROM:
;Drv.c,167 :: 		unsigned char rd_EEPROM(unsigned int addr)
;Drv.c,170 :: 		DP0L=addr;
0x0112	0x850B82  	MOV DP0L, FARG_rd_EEPROM_addr+0
;Drv.c,171 :: 		DP0H=addr>>8;
0x0115	0xA80C    	MOV R0, FARG_rd_EEPROM_addr+1
0x0117	0x7900    	MOV R1, #0
0x0119	0x850083  	MOV DP0H, 0
;Drv.c,172 :: 		asm movx A,@DPTR;
0x011C	0xE0      	MOVX A, @DPTR
;Drv.c,173 :: 		return ACC;
0x011D	0xA8E0    	MOV R0, ACC
;Drv.c,174 :: 		}
0x011F	0x22      	RET
; end of _rd_EEPROM
_ScanKbd:
;Drv.c,59 :: 		unsigned char ScanKbd(void) {
;Drv.c,61 :: 		unsigned char kp = 0;
0x0120	0x750B00  	MOV ScanKbd_kp_L0, #0
;Drv.c,62 :: 		P0 = P0&0x1F|0xC0;
0x0123	0xE580    	MOV A, P0
0x0125	0x541F    	ANL A, #31
0x0127	0xF8      	MOV R0, A
0x0128	0x44C0    	ORL A, #192
0x012A	0xF580    	MOV P0, A
;Drv.c,63 :: 		for(i=0;i<10;i++);
0x012C	0x750C00  	MOV ScanKbd_i_L0, #0
L_ScanKbd18:
0x012F	0xC3      	CLR C
0x0130	0xE50C    	MOV A, ScanKbd_i_L0
0x0132	0x940A    	SUBB A, #10
0x0134	0x5004    	JNC L_ScanKbd19
0x0136	0x050C    	INC ScanKbd_i_L0
0x0138	0x80F5    	SJMP L_ScanKbd18
L_ScanKbd19:
;Drv.c,64 :: 		if (!P1_0_bit) kp = '7';
0x013A	0x209003  	JB P1_0_bit, L_ScanKbd21
0x013D	0x750B37  	MOV ScanKbd_kp_L0, #55
L_ScanKbd21:
;Drv.c,68 :: 		P0 = P0&0x1F|0xA0;
0x0140	0xE580    	MOV A, P0
0x0142	0x541F    	ANL A, #31
0x0144	0xF8      	MOV R0, A
0x0145	0x44A0    	ORL A, #160
0x0147	0xF580    	MOV P0, A
;Drv.c,69 :: 		for(i=0;i<10;i++);
0x0149	0x750C00  	MOV ScanKbd_i_L0, #0
L_ScanKbd22:
0x014C	0xC3      	CLR C
0x014D	0xE50C    	MOV A, ScanKbd_i_L0
0x014F	0x940A    	SUBB A, #10
0x0151	0x5004    	JNC L_ScanKbd23
0x0153	0x050C    	INC ScanKbd_i_L0
0x0155	0x80F5    	SJMP L_ScanKbd22
L_ScanKbd23:
;Drv.c,70 :: 		if (!P1_0_bit) kp = '8';
0x0157	0x209003  	JB P1_0_bit, L_ScanKbd25
0x015A	0x750B38  	MOV ScanKbd_kp_L0, #56
L_ScanKbd25:
;Drv.c,74 :: 		P0 = P0&0x1F|0x60;
0x015D	0xE580    	MOV A, P0
0x015F	0x541F    	ANL A, #31
0x0161	0xF8      	MOV R0, A
0x0162	0x4460    	ORL A, #96
0x0164	0xF580    	MOV P0, A
;Drv.c,75 :: 		for(i=0;i<10;i++);
0x0166	0x750C00  	MOV ScanKbd_i_L0, #0
L_ScanKbd26:
0x0169	0xC3      	CLR C
0x016A	0xE50C    	MOV A, ScanKbd_i_L0
0x016C	0x940A    	SUBB A, #10
0x016E	0x5004    	JNC L_ScanKbd27
0x0170	0x050C    	INC ScanKbd_i_L0
0x0172	0x80F5    	SJMP L_ScanKbd26
L_ScanKbd27:
;Drv.c,76 :: 		if (!P1_0_bit) kp = '9';
0x0174	0x209003  	JB P1_0_bit, L_ScanKbd29
0x0177	0x750B39  	MOV ScanKbd_kp_L0, #57
L_ScanKbd29:
;Drv.c,80 :: 		return kp;
0x017A	0xA80B    	MOV R0, ScanKbd_kp_L0
;Drv.c,81 :: 		}
0x017C	0x22      	RET
; end of _ScanKbd
_init:
;Drv.c,5 :: 		void init(void){
;Drv.c,9 :: 		WMCON = 0b11111001;  // Enable WatchDog Timer, set prescaller bits to 111
0x017D	0x7596F9  	MOV WMCON, #249
;Drv.c,12 :: 		WMCON|=0x08;  // internal EEPROM enable
0x0180	0x439608  	ORL WMCON, #8
;Drv.c,13 :: 		WMCON&=0xfb;  // DPTR = DP0
0x0183	0x5396FB  	ANL WMCON, #251
;Drv.c,16 :: 		PCON |= 0x80;        // SMOD=1
0x0186	0x438780  	ORL PCON, #128
;Drv.c,17 :: 		SCON = 0x72;        // mode 1, receiver enable
0x0189	0x759872  	MOV SCON, #114
;Drv.c,18 :: 		TMOD = 0x22;        //Timers 0&1 are 8-bit timers with auto-reload
0x018C	0x758922  	MOV TMOD, #34
;Drv.c,19 :: 		TH1   = 0xF5;        // 9600 baud at 20 MHz
0x018F	0x758DF5  	MOV TH1, #245
;Drv.c,20 :: 		ES_bit = 0;
0x0192	0xC2AC    	CLR ES_bit
;Drv.c,23 :: 		TF1_bit = 0;       // Ensure that Timer1 interrupt flag is cleared
0x0194	0xC28F    	CLR TF1_bit
;Drv.c,24 :: 		ET1_bit = 1;       // Enable Timer1 interrupt
0x0196	0xD2AB    	SETB ET1_bit
;Drv.c,25 :: 		EA_bit  = 1;       // Set global interrupt enable
0x0198	0xD2AF    	SETB EA_bit
;Drv.c,27 :: 		GATE1_bit = 0;     // Clear this flag to enable Timer1 whenever TR1 bit is set.
0x019A	0xC3      	CLR C
0x019B	0xE589    	MOV A, GATE1_bit
0x019D	0x92E7    	MOV #224.B7, C
0x019F	0xF589    	MOV GATE1_bit, A
;Drv.c,28 :: 		C_T1_bit  = 0;     // Set Timer operation: Timer1 counts the divided-down systam clock.
0x01A1	0xC3      	CLR C
0x01A2	0xE589    	MOV A, C_T1_bit
0x01A4	0x92E6    	MOV #224.B6, C
0x01A6	0xF589    	MOV C_T1_bit, A
;Drv.c,29 :: 		M11_bit   = 0;     // M11_M01 = 01    =>   Mode 1(16-bit Timer/Counter)
0x01A8	0xC3      	CLR C
0x01A9	0xE589    	MOV A, M11_bit
0x01AB	0x92E5    	MOV #224.B5, C
0x01AD	0xF589    	MOV M11_bit, A
;Drv.c,30 :: 		M01_bit   = 1;
0x01AF	0xD3      	SETB C
0x01B0	0xE589    	MOV A, M01_bit
0x01B2	0x92E4    	MOV #224.B4, C
0x01B4	0xF589    	MOV M01_bit, A
;Drv.c,32 :: 		TR1_bit = 0;       // Turn off Timer1
0x01B6	0xC28E    	CLR TR1_bit
;Drv.c,33 :: 		TH1 = 0xFC;        // Reset Timer1 high byte  65536-1000
0x01B8	0x758DFC  	MOV TH1, #252
;Drv.c,34 :: 		TL1 = 0x18;        // Reset Timer1 low byte
0x01BB	0x758B18  	MOV TL1, #24
;Drv.c,35 :: 		TR1_bit = 1;       // Run Timer1
0x01BE	0xD28E    	SETB TR1_bit
;Drv.c,39 :: 		P3=0xff;
0x01C0	0x75B0FF  	MOV P3, #255
;Drv.c,40 :: 		EX0_bit = 1;
0x01C3	0xD2A8    	SETB EX0_bit
;Drv.c,44 :: 		DelayMs(30);
0x01C5	0x750E1E  	MOV FARG_DelayMs_m, #30
0x01C8	0x750F00  	MOV FARG_DelayMs_m+1, #0
0x01CB	0x119C    	ACALL _DelayMs
;Drv.c,45 :: 		RW = 0;
0x01CD	0xC3      	CLR C
0x01CE	0xE5B0    	MOV A, P3_5_bit
0x01D0	0x92E5    	MOV #224.B5, C
0x01D2	0xF5B0    	MOV P3_5_bit, A
;Drv.c,46 :: 		outcw(0x3C);
0x01D4	0x750E3C  	MOV FARG_outcw_c, #60
0x01D7	0x11B8    	ACALL _outcw
;Drv.c,47 :: 		outcw(0x0C);
0x01D9	0x750E0C  	MOV FARG_outcw_c, #12
0x01DC	0x11B8    	ACALL _outcw
;Drv.c,48 :: 		outcw(0x01);
0x01DE	0x750E01  	MOV FARG_outcw_c, #1
0x01E1	0x11B8    	ACALL _outcw
;Drv.c,49 :: 		outcw(0x06);
0x01E3	0x750E06  	MOV FARG_outcw_c, #6
0x01E6	0x11B8    	ACALL _outcw
;Drv.c,50 :: 		outcw(0x40);
0x01E8	0x750E40  	MOV FARG_outcw_c, #64
0x01EB	0x11B8    	ACALL _outcw
;Drv.c,51 :: 		for(i=0;i<8;i++) outd(0);
0x01ED	0x750B00  	MOV init_i_L0, #0
L_init0:
0x01F0	0xC3      	CLR C
0x01F1	0xE50B    	MOV A, init_i_L0
0x01F3	0x9408    	SUBB A, #8
0x01F5	0x5009    	JNC L_init1
0x01F7	0x750E00  	MOV FARG_outd_c, #0
0x01FA	0x116D    	ACALL _outd
0x01FC	0x050B    	INC init_i_L0
0x01FE	0x80F0    	SJMP L_init0
L_init1:
;Drv.c,52 :: 		for(i=0;i<8;i++) outd(0x10);
0x0200	0x750B00  	MOV init_i_L0, #0
L_init3:
0x0203	0xC3      	CLR C
0x0204	0xE50B    	MOV A, init_i_L0
0x0206	0x9408    	SUBB A, #8
0x0208	0x5009    	JNC L_init4
0x020A	0x750E10  	MOV FARG_outd_c, #16
0x020D	0x116D    	ACALL _outd
0x020F	0x050B    	INC init_i_L0
0x0211	0x80F0    	SJMP L_init3
L_init4:
;Drv.c,53 :: 		for(i=0;i<8;i++) outd(0x18);
0x0213	0x750B00  	MOV init_i_L0, #0
L_init6:
0x0216	0xC3      	CLR C
0x0217	0xE50B    	MOV A, init_i_L0
0x0219	0x9408    	SUBB A, #8
0x021B	0x5009    	JNC L_init7
0x021D	0x750E18  	MOV FARG_outd_c, #24
0x0220	0x116D    	ACALL _outd
0x0222	0x050B    	INC init_i_L0
0x0224	0x80F0    	SJMP L_init6
L_init7:
;Drv.c,54 :: 		for(i=0;i<8;i++) outd(0x1C);
0x0226	0x750B00  	MOV init_i_L0, #0
L_init9:
0x0229	0xC3      	CLR C
0x022A	0xE50B    	MOV A, init_i_L0
0x022C	0x9408    	SUBB A, #8
0x022E	0x5009    	JNC L_init10
0x0230	0x750E1C  	MOV FARG_outd_c, #28
0x0233	0x116D    	ACALL _outd
0x0235	0x050B    	INC init_i_L0
0x0237	0x80F0    	SJMP L_init9
L_init10:
;Drv.c,55 :: 		for(i=0;i<8;i++) outd(0x1E);
0x0239	0x750B00  	MOV init_i_L0, #0
L_init12:
0x023C	0xC3      	CLR C
0x023D	0xE50B    	MOV A, init_i_L0
0x023F	0x9408    	SUBB A, #8
0x0241	0x5009    	JNC L_init13
0x0243	0x750E1E  	MOV FARG_outd_c, #30
0x0246	0x116D    	ACALL _outd
0x0248	0x050B    	INC init_i_L0
0x024A	0x80F0    	SJMP L_init12
L_init13:
;Drv.c,56 :: 		for(i=0;i<8;i++) outd(0x1F);
0x024C	0x750B00  	MOV init_i_L0, #0
L_init15:
0x024F	0xC3      	CLR C
0x0250	0xE50B    	MOV A, init_i_L0
0x0252	0x9408    	SUBB A, #8
0x0254	0x5009    	JNC L_init16
0x0256	0x750E1F  	MOV FARG_outd_c, #31
0x0259	0x116D    	ACALL _outd
0x025B	0x050B    	INC init_i_L0
0x025D	0x80F0    	SJMP L_init15
L_init16:
;Drv.c,57 :: 		}
0x025F	0x22      	RET
; end of _init
___CC2D:
;__Lib_System.c,13 :: 		
;__Lib_System.c,15 :: 		
_CC2D_Loop1:
;__Lib_System.c,16 :: 		
0x0260	0xE4      	CLR A
;__Lib_System.c,17 :: 		
0x0261	0x93      	MOVC A, @A+DPTR
;__Lib_System.c,18 :: 		
0x0262	0xF6      	MOV @R0, A
;__Lib_System.c,19 :: 		
0x0263	0x08      	INC R0
;__Lib_System.c,20 :: 		
0x0264	0xA3      	INC DPTR
;__Lib_System.c,21 :: 		
0x0265	0xD9F9    	DJNZ R1, _CC2D_Loop1
;__Lib_System.c,23 :: 		
0x0267	0x22      	RET
; end of ___CC2D
_clear_lcd:
;Drv.c,176 :: 		void clear_lcd(void){
;Drv.c,178 :: 		outcw(0x80);
0x0268	0x750E80  	MOV FARG_outcw_c, #128
0x026B	0x11B8    	ACALL _outcw
;Drv.c,179 :: 		for(i=0;i<16;i++)
0x026D	0x750B00  	MOV clear_lcd_i_L0, #0
L_clear_lcd40:
0x0270	0xC3      	CLR C
0x0271	0xE50B    	MOV A, clear_lcd_i_L0
0x0273	0x9410    	SUBB A, #16
0x0275	0x5009    	JNC L_clear_lcd41
;Drv.c,180 :: 		outd(' ');
0x0277	0x750E20  	MOV FARG_outd_c, #32
0x027A	0x116D    	ACALL _outd
;Drv.c,179 :: 		for(i=0;i<16;i++)
0x027C	0x050B    	INC clear_lcd_i_L0
;Drv.c,180 :: 		outd(' ');
0x027E	0x80F0    	SJMP L_clear_lcd40
L_clear_lcd41:
;Drv.c,181 :: 		}
0x0280	0x22      	RET
; end of _clear_lcd
_wr_EEPROM:
;Drv.c,156 :: 		void wr_EEPROM(unsigned int addr,unsigned char eedata)
;Drv.c,159 :: 		DP0L=addr;  //addr1.byte_.l_byte;
0x0281	0x850B82  	MOV DP0L, FARG_wr_EEPROM_addr+0
;Drv.c,160 :: 		DP0H=addr>>8;
0x0284	0xA80C    	MOV R0, FARG_wr_EEPROM_addr+1
0x0286	0x7900    	MOV R1, #0
0x0288	0x850083  	MOV DP0H, 0
;Drv.c,161 :: 		WMCON|=0x10;
0x028B	0x439610  	ORL WMCON, #16
;Drv.c,162 :: 		ACC = eedata;
0x028E	0x850DE0  	MOV ACC, FARG_wr_EEPROM_eedata+0
;Drv.c,163 :: 		asm  movx @DPTR,A;
0x0291	0xF0      	MOVX @DPTR, A
;Drv.c,164 :: 		WMCON&=0xef;
0x0292	0x5396EF  	ANL WMCON, #239
;Drv.c,165 :: 		}
0x0295	0x22      	RET
; end of _wr_EEPROM
_Timer1InterruptHandler:
0x0296	0xC0D0    	PUSH PSW
0x0298	0xC0E0    	PUSH ACC
0x029A	0xC0F0    	PUSH B
0x029C	0xC082    	PUSH DP0L
0x029E	0xC083    	PUSH DP0H
;Svetofor.c,133 :: 		void Timer1InterruptHandler() org IVT_ADDR_ET1{
;Svetofor.c,135 :: 		EA_bit = 0;        // Clear global interrupt enable flag
0x02A0	0xC2AF    	CLR EA_bit
;Svetofor.c,136 :: 		TF1_bit = 0;       // Ensure that Timer1 interrupt flag is cleared
0x02A2	0xC28F    	CLR TF1_bit
;Svetofor.c,138 :: 		TR1_bit = 0;       // Stop Timer1
0x02A4	0xC28E    	CLR TR1_bit
;Svetofor.c,139 :: 		TH1 = 0xFC;        // Reset Timer1 high byte  65536-1000
0x02A6	0x758DFC  	MOV TH1, #252
;Svetofor.c,140 :: 		TL1 = 0x18;        // Reset Timer1 low byte
0x02A9	0x758B18  	MOV TL1, #24
;Svetofor.c,143 :: 		ms++;
0x02AC	0x7401    	MOV A, #1
0x02AE	0x2533    	ADD A, _ms
0x02B0	0xF533    	MOV _ms, A
0x02B2	0x7400    	MOV A, #0
0x02B4	0x3534    	ADDC A, _ms+1
0x02B6	0xF534    	MOV _ms+1, A
;Svetofor.c,145 :: 		EA_bit = 1;        // Set global interrupt enable flag
0x02B8	0xD2AF    	SETB EA_bit
;Svetofor.c,146 :: 		TR1_bit = 1;       // Run Timer1
0x02BA	0xD28E    	SETB TR1_bit
;Svetofor.c,147 :: 		}
0x02BC	0xD083    	POP DP0H
0x02BE	0xD082    	POP DP0L
0x02C0	0xD0F0    	POP B
0x02C2	0xD0E0    	POP ACC
0x02C4	0xD0D0    	POP PSW
0x02C6	0x32      	RETI
; end of _Timer1InterruptHandler
_INT0_Interrupt:
0x02C7	0xC0D0    	PUSH PSW
0x02C9	0xC0E0    	PUSH ACC
0x02CB	0xC0F0    	PUSH B
0x02CD	0xC082    	PUSH DP0L
0x02CF	0xC083    	PUSH DP0H
;Svetofor.c,149 :: 		void INT0_Interrupt() org IVT_ADDR_EX0 {
;Svetofor.c,150 :: 		EA_bit = 0;
0x02D1	0xC2AF    	CLR EA_bit
;Svetofor.c,151 :: 		lcd_led=~lcd_led;
0x02D3	0xA284    	MOV C, P0_4_bit
0x02D5	0xB3      	CPL C
0x02D6	0x9284    	MOV P0_4_bit, C
;Svetofor.c,152 :: 		EA_bit = 1;
0x02D8	0xD2AF    	SETB EA_bit
;Svetofor.c,153 :: 		}
0x02DA	0xD083    	POP DP0H
0x02DC	0xD082    	POP DP0L
0x02DE	0xD0F0    	POP B
0x02E0	0xD0E0    	POP ACC
0x02E2	0xD0D0    	POP PSW
0x02E4	0x32      	RETI
; end of _INT0_Interrupt
_main:
0x02E5	0x758180  	MOV SP, #128
0x02E8	0x120583  	LCALL 1411
;Svetofor.c,26 :: 		void main (void) {
;Svetofor.c,29 :: 		init();
0x02EB	0x317D    	ACALL _init
;Svetofor.c,30 :: 		RED = 0;      // Красный цвет
0x02ED	0xC280    	CLR P0_0_bit
;Svetofor.c,31 :: 		YEL = 1;      // Желтый цвет
0x02EF	0xD281    	SETB P0_1_bit
;Svetofor.c,32 :: 		GRN = 1;      // Зеленый цвет
0x02F1	0xD282    	SETB P0_2_bit
;Svetofor.c,33 :: 		lcd_led = 0;  // Подсветка индикатора
0x02F3	0xC284    	CLR P0_4_bit
;Svetofor.c,34 :: 		tr=rd_EEPROM(0); if((tr>30)||(tr<5)) tr=5;
0x02F5	0x750B00  	MOV FARG_rd_EEPROM_addr, #0
0x02F8	0x750C00  	MOV FARG_rd_EEPROM_addr+1, #0
0x02FB	0x3112    	ACALL _rd_EEPROM
0x02FD	0x85000A  	MOV _tr, 0
0x0300	0xD3      	SETB C
0x0301	0xE8      	MOV A, R0
0x0302	0x941E    	SUBB A, #30
0x0304	0x5009    	JNC L__main49
0x0306	0xC3      	CLR C
0x0307	0xE50A    	MOV A, _tr
0x0309	0x9405    	SUBB A, #5
0x030B	0x4002    	JC L__main49
0x030D	0x8003    	SJMP L_main2
L__main49:
0x030F	0x750A05  	MOV _tr, #5
L_main2:
;Svetofor.c,35 :: 		tg=rd_EEPROM(1); if((tg>30)||(tg<5)) tg=5;
0x0312	0x750B01  	MOV FARG_rd_EEPROM_addr, #1
0x0315	0x750C00  	MOV FARG_rd_EEPROM_addr+1, #0
0x0318	0x3112    	ACALL _rd_EEPROM
0x031A	0x850009  	MOV _tg, 0
0x031D	0xD3      	SETB C
0x031E	0xE8      	MOV A, R0
0x031F	0x941E    	SUBB A, #30
0x0321	0x5009    	JNC L__main48
0x0323	0xC3      	CLR C
0x0324	0xE509    	MOV A, _tg
0x0326	0x9405    	SUBB A, #5
0x0328	0x4002    	JC L__main48
0x032A	0x8003    	SJMP L_main5
L__main48:
0x032C	0x750905  	MOV _tg, #5
L_main5:
;Svetofor.c,36 :: 		t = 10*tr;
0x032F	0x850AF0  	MOV B, _tr+0
0x0332	0x740A    	MOV A, #10
0x0334	0xA4      	MUL AB
0x0335	0xF8      	MOV R0, A
0x0336	0x850008  	MOV _t, 0
;Svetofor.c,51 :: 		while (1) {
L_main6:
;Svetofor.c,52 :: 		key=ScanKbd();
0x0339	0x3120    	ACALL _ScanKbd
0x033B	0x850032  	MOV _key, 0
;Svetofor.c,53 :: 		switch (state) {
0x033E	0xA12F    	AJMP L_main8
;Svetofor.c,54 :: 		case R: // Красный
L_main10:
;Svetofor.c,56 :: 		clear_lcd(); outcw(0x80); outd('К'); //outd('р'); outd('а');
0x0340	0x5168    	ACALL _clear_lcd
0x0342	0x750E80  	MOV FARG_outcw_c, #128
0x0345	0x11B8    	ACALL _outcw
0x0347	0x750ECA  	MOV FARG_outd_c, #202
0x034A	0x116D    	ACALL _outd
;Svetofor.c,58 :: 		if (T_FLAG) { state=RY;  T_FLAG = 0;  t=20;  YEL=0; }
0x034C	0xE530    	MOV A, _T_FLAG
0x034E	0x600D    	JZ L_main11
0x0350	0x753102  	MOV _state, #2
0x0353	0x753000  	MOV _T_FLAG, #0
0x0356	0x750814  	MOV _t, #20
0x0359	0xC281    	CLR P0_1_bit
0x035B	0x800B    	SJMP L_main12
L_main11:
;Svetofor.c,59 :: 		else if (key == '8') { state=SR;  RED=1; }
0x035D	0xE532    	MOV A, _key
0x035F	0x6438    	XRL A, #56
0x0361	0x7005    	JNZ L_main13
0x0363	0x753106  	MOV _state, #6
0x0366	0xD280    	SETB P0_0_bit
L_main13:
L_main12:
;Svetofor.c,60 :: 		break;
0x0368	0xA167    	AJMP L_main9
;Svetofor.c,61 :: 		case RY: // Красный-желтый
L_main14:
;Svetofor.c,63 :: 		clear_lcd(); outcw(0x80); outd('К'); outd('р'); outd('.'); outd('-');
0x036A	0x5168    	ACALL _clear_lcd
0x036C	0x750E80  	MOV FARG_outcw_c, #128
0x036F	0x11B8    	ACALL _outcw
0x0371	0x750ECA  	MOV FARG_outd_c, #202
0x0374	0x116D    	ACALL _outd
0x0376	0x750EF0  	MOV FARG_outd_c, #240
0x0379	0x116D    	ACALL _outd
0x037B	0x750E2E  	MOV FARG_outd_c, #46
0x037E	0x116D    	ACALL _outd
0x0380	0x750E2D  	MOV FARG_outd_c, #45
0x0383	0x116D    	ACALL _outd
;Svetofor.c,64 :: 		outd('ж'); outd('.'); //outd('е'); outd('л'); outd('т'); outd('ы'); outd('й');
0x0385	0x750EE6  	MOV FARG_outd_c, #230
0x0388	0x116D    	ACALL _outd
0x038A	0x750E2E  	MOV FARG_outd_c, #46
0x038D	0x116D    	ACALL _outd
;Svetofor.c,65 :: 		if (T_FLAG) { state=G;  T_FLAG = 0;  t=10*tg;  RED=1; YEL=1; GRN=0; }
0x038F	0xE530    	MOV A, _T_FLAG
0x0391	0x6018    	JZ L_main15
0x0393	0x753103  	MOV _state, #3
0x0396	0x753000  	MOV _T_FLAG, #0
0x0399	0x8509F0  	MOV B, _tg+0
0x039C	0x740A    	MOV A, #10
0x039E	0xA4      	MUL AB
0x039F	0xF8      	MOV R0, A
0x03A0	0x850008  	MOV _t, 0
0x03A3	0xD280    	SETB P0_0_bit
0x03A5	0xD281    	SETB P0_1_bit
0x03A7	0xC282    	CLR P0_2_bit
0x03A9	0x800D    	SJMP L_main16
L_main15:
;Svetofor.c,66 :: 		else if (key == '8') { state=SR;  RED=1; YEL=1; }
0x03AB	0xE532    	MOV A, _key
0x03AD	0x6438    	XRL A, #56
0x03AF	0x7007    	JNZ L_main17
0x03B1	0x753106  	MOV _state, #6
0x03B4	0xD280    	SETB P0_0_bit
0x03B6	0xD281    	SETB P0_1_bit
L_main17:
L_main16:
;Svetofor.c,67 :: 		break;
0x03B8	0xA167    	AJMP L_main9
;Svetofor.c,68 :: 		case G: // Зеленый
L_main18:
;Svetofor.c,70 :: 		clear_lcd(); outcw(0x80); outd('З'); //outd('е'); outd('л');
0x03BA	0x5168    	ACALL _clear_lcd
0x03BC	0x750E80  	MOV FARG_outcw_c, #128
0x03BF	0x11B8    	ACALL _outcw
0x03C1	0x750EC7  	MOV FARG_outd_c, #199
0x03C4	0x116D    	ACALL _outd
;Svetofor.c,72 :: 		if (T_FLAG) { state=GG;  T_FLAG = 0;  t=3; }
0x03C6	0xE530    	MOV A, _T_FLAG
0x03C8	0x600B    	JZ L_main19
0x03CA	0x753104  	MOV _state, #4
0x03CD	0x753000  	MOV _T_FLAG, #0
0x03D0	0x750803  	MOV _t, #3
0x03D3	0x800B    	SJMP L_main20
L_main19:
;Svetofor.c,73 :: 		else if (key == '8') { state=SR;  GRN=1; }
0x03D5	0xE532    	MOV A, _key
0x03D7	0x6438    	XRL A, #56
0x03D9	0x7005    	JNZ L_main21
0x03DB	0x753106  	MOV _state, #6
0x03DE	0xD282    	SETB P0_2_bit
L_main21:
L_main20:
;Svetofor.c,74 :: 		break;
0x03E0	0xA167    	AJMP L_main9
;Svetofor.c,75 :: 		case GG: // Мигающий зеленый
L_main22:
;Svetofor.c,76 :: 		GRN=0; DelayMs(500);
0x03E2	0xC282    	CLR P0_2_bit
0x03E4	0x750EF4  	MOV FARG_DelayMs_m, #244
0x03E7	0x750F01  	MOV FARG_DelayMs_m+1, #1
0x03EA	0x119C    	ACALL _DelayMs
;Svetofor.c,77 :: 		GRN=1; DelayMs(400);
0x03EC	0xD282    	SETB P0_2_bit
0x03EE	0x750E90  	MOV FARG_DelayMs_m, #144
0x03F1	0x750F01  	MOV FARG_DelayMs_m+1, #1
0x03F4	0x119C    	ACALL _DelayMs
;Svetofor.c,78 :: 		if (T_FLAG) { state=Y;  T_FLAG = 0;  t=20;  YEL=0; }
0x03F6	0xE530    	MOV A, _T_FLAG
0x03F8	0x600B    	JZ L_main23
0x03FA	0x753105  	MOV _state, #5
0x03FD	0x753000  	MOV _T_FLAG, #0
0x0400	0x750814  	MOV _t, #20
0x0403	0xC281    	CLR P0_1_bit
L_main23:
;Svetofor.c,79 :: 		break;
0x0405	0xA167    	AJMP L_main9
;Svetofor.c,80 :: 		case Y: // Желтый
L_main24:
;Svetofor.c,82 :: 		clear_lcd(); outcw(0x80); outd('Ж'); //outd('е'); outd('л');
0x0407	0x5168    	ACALL _clear_lcd
0x0409	0x750E80  	MOV FARG_outcw_c, #128
0x040C	0x11B8    	ACALL _outcw
0x040E	0x750EC6  	MOV FARG_outd_c, #198
0x0411	0x116D    	ACALL _outd
;Svetofor.c,84 :: 		if (T_FLAG) { state=R;  T_FLAG = 0;  t=10*tr; YEL=1; RED=0; }
0x0413	0xE530    	MOV A, _T_FLAG
0x0415	0x6016    	JZ L_main25
0x0417	0x753101  	MOV _state, #1
0x041A	0x753000  	MOV _T_FLAG, #0
0x041D	0x850AF0  	MOV B, _tr+0
0x0420	0x740A    	MOV A, #10
0x0422	0xA4      	MUL AB
0x0423	0xF8      	MOV R0, A
0x0424	0x850008  	MOV _t, 0
0x0427	0xD281    	SETB P0_1_bit
0x0429	0xC280    	CLR P0_0_bit
0x042B	0x800B    	SJMP L_main26
L_main25:
;Svetofor.c,85 :: 		else if (key == '8') { state=SR;  YEL=1; }
0x042D	0xE532    	MOV A, _key
0x042F	0x6438    	XRL A, #56
0x0431	0x7005    	JNZ L_main27
0x0433	0x753106  	MOV _state, #6
0x0436	0xD281    	SETB P0_1_bit
L_main27:
L_main26:
;Svetofor.c,86 :: 		break;
0x0438	0xA167    	AJMP L_main9
;Svetofor.c,87 :: 		case SR: // Настройка времени красного сигнала
L_main28:
;Svetofor.c,89 :: 		clear_lcd(); outcw(0x80); outd('t'); outd('к'); outd('=');
0x043A	0x5168    	ACALL _clear_lcd
0x043C	0x750E80  	MOV FARG_outcw_c, #128
0x043F	0x11B8    	ACALL _outcw
0x0441	0x750E74  	MOV FARG_outd_c, #116
0x0444	0x116D    	ACALL _outd
0x0446	0x750EEA  	MOV FARG_outd_c, #234
0x0449	0x116D    	ACALL _outd
0x044B	0x750E3D  	MOV FARG_outd_c, #61
0x044E	0x116D    	ACALL _outd
;Svetofor.c,90 :: 		outd(tr/10+48); outd(tr%10+48); outd('c');
0x0450	0x75F00A  	MOV B, #10
0x0453	0xE50A    	MOV A, _tr
0x0455	0x84      	DIV AB
0x0456	0xF8      	MOV R0, A
0x0457	0x2430    	ADD A, #48
0x0459	0xF50E    	MOV FARG_outd_c, A
0x045B	0x116D    	ACALL _outd
0x045D	0x75F00A  	MOV B, #10
0x0460	0xE50A    	MOV A, _tr
0x0462	0x84      	DIV AB
0x0463	0xE5F0    	MOV A, B
0x0465	0xF8      	MOV R0, A
0x0466	0x2430    	ADD A, #48
0x0468	0xF50E    	MOV FARG_outd_c, A
0x046A	0x116D    	ACALL _outd
0x046C	0x750E63  	MOV FARG_outd_c, #99
0x046F	0x116D    	ACALL _outd
;Svetofor.c,91 :: 		switch(key) {
0x0471	0x8026    	SJMP L_main29
;Svetofor.c,92 :: 		case '7': if (tr>5) tr--; break;
L_main31:
0x0473	0xD3      	SETB C
0x0474	0xE50A    	MOV A, _tr
0x0476	0x9405    	SUBB A, #5
0x0478	0x4002    	JC L_main32
0x047A	0x150A    	DEC _tr
L_main32:
0x047C	0x802D    	SJMP L_main30
;Svetofor.c,93 :: 		case '9': if (tr<30) tr++; break;
L_main33:
0x047E	0xC3      	CLR C
0x047F	0xE50A    	MOV A, _tr
0x0481	0x941E    	SUBB A, #30
0x0483	0x5002    	JNC L_main34
0x0485	0x050A    	INC _tr
L_main34:
0x0487	0x8022    	SJMP L_main30
;Svetofor.c,94 :: 		case '8': wr_EEPROM(0,tr); state=SG; break;
L_main35:
0x0489	0x750B00  	MOV FARG_wr_EEPROM_addr, #0
0x048C	0x750C00  	MOV FARG_wr_EEPROM_addr+1, #0
0x048F	0x850A0D  	MOV FARG_wr_EEPROM_eedata, _tr+0
0x0492	0x5181    	ACALL _wr_EEPROM
0x0494	0x753107  	MOV _state, #7
0x0497	0x8012    	SJMP L_main30
;Svetofor.c,95 :: 		}
L_main29:
0x0499	0xE532    	MOV A, _key
0x049B	0x6437    	XRL A, #55
0x049D	0x60D4    	JZ L_main31
0x049F	0xE532    	MOV A, _key
0x04A1	0x6439    	XRL A, #57
0x04A3	0x60D9    	JZ L_main33
0x04A5	0xE532    	MOV A, _key
0x04A7	0x6438    	XRL A, #56
0x04A9	0x60DE    	JZ L_main35
L_main30:
;Svetofor.c,96 :: 		break;
0x04AB	0xA167    	AJMP L_main9
;Svetofor.c,97 :: 		case SG: // Настройка времени зеленого сигнала
L_main36:
;Svetofor.c,99 :: 		clear_lcd(); outcw(0x80); outd('t'); outd('з'); outd('=');
0x04AD	0x5168    	ACALL _clear_lcd
0x04AF	0x750E80  	MOV FARG_outcw_c, #128
0x04B2	0x11B8    	ACALL _outcw
0x04B4	0x750E74  	MOV FARG_outd_c, #116
0x04B7	0x116D    	ACALL _outd
0x04B9	0x750EE7  	MOV FARG_outd_c, #231
0x04BC	0x116D    	ACALL _outd
0x04BE	0x750E3D  	MOV FARG_outd_c, #61
0x04C1	0x116D    	ACALL _outd
;Svetofor.c,100 :: 		outd(tg/10+48); outd(tg%10+48); outd('c');
0x04C3	0x75F00A  	MOV B, #10
0x04C6	0xE509    	MOV A, _tg
0x04C8	0x84      	DIV AB
0x04C9	0xF8      	MOV R0, A
0x04CA	0x2430    	ADD A, #48
0x04CC	0xF50E    	MOV FARG_outd_c, A
0x04CE	0x116D    	ACALL _outd
0x04D0	0x75F00A  	MOV B, #10
0x04D3	0xE509    	MOV A, _tg
0x04D5	0x84      	DIV AB
0x04D6	0xE5F0    	MOV A, B
0x04D8	0xF8      	MOV R0, A
0x04D9	0x2430    	ADD A, #48
0x04DB	0xF50E    	MOV FARG_outd_c, A
0x04DD	0x116D    	ACALL _outd
0x04DF	0x750E63  	MOV FARG_outd_c, #99
0x04E2	0x116D    	ACALL _outd
;Svetofor.c,101 :: 		switch(key) {
0x04E4	0x8035    	SJMP L_main37
;Svetofor.c,102 :: 		case '7': if (tg>5) tg--; break;
L_main39:
0x04E6	0xD3      	SETB C
0x04E7	0xE509    	MOV A, _tg
0x04E9	0x9405    	SUBB A, #5
0x04EB	0x4002    	JC L_main40
0x04ED	0x1509    	DEC _tg
L_main40:
0x04EF	0x803C    	SJMP L_main38
;Svetofor.c,103 :: 		case '9': if (tg<30) tg++; break;
L_main41:
0x04F1	0xC3      	CLR C
0x04F2	0xE509    	MOV A, _tg
0x04F4	0x941E    	SUBB A, #30
0x04F6	0x5002    	JNC L_main42
0x04F8	0x0509    	INC _tg
L_main42:
0x04FA	0x8031    	SJMP L_main38
;Svetofor.c,104 :: 		case '8': wr_EEPROM(1,tg); state=R; T_FLAG = 0; t=10*tr; RED=0; break;
L_main43:
0x04FC	0x750B01  	MOV FARG_wr_EEPROM_addr, #1
0x04FF	0x750C00  	MOV FARG_wr_EEPROM_addr+1, #0
0x0502	0x85090D  	MOV FARG_wr_EEPROM_eedata, _tg+0
0x0505	0x5181    	ACALL _wr_EEPROM
0x0507	0x753101  	MOV _state, #1
0x050A	0x753000  	MOV _T_FLAG, #0
0x050D	0x850AF0  	MOV B, _tr+0
0x0510	0x740A    	MOV A, #10
0x0512	0xA4      	MUL AB
0x0513	0xF8      	MOV R0, A
0x0514	0x850008  	MOV _t, 0
0x0517	0xC280    	CLR P0_0_bit
0x0519	0x8012    	SJMP L_main38
;Svetofor.c,105 :: 		}
L_main37:
0x051B	0xE532    	MOV A, _key
0x051D	0x6437    	XRL A, #55
0x051F	0x60C5    	JZ L_main39
0x0521	0xE532    	MOV A, _key
0x0523	0x6439    	XRL A, #57
0x0525	0x60CA    	JZ L_main41
0x0527	0xE532    	MOV A, _key
0x0529	0x6438    	XRL A, #56
0x052B	0x60CF    	JZ L_main43
L_main38:
;Svetofor.c,106 :: 		break;
0x052D	0x8038    	SJMP L_main9
;Svetofor.c,107 :: 		}
L_main8:
0x052F	0xE531    	MOV A, _state
0x0531	0x6401    	XRL A, #1
0x0533	0x7002    	JNZ #2
0x0535	0x6140    	AJMP L_main10
0x0537	0xE531    	MOV A, _state
0x0539	0x6402    	XRL A, #2
0x053B	0x7002    	JNZ #2
0x053D	0x616A    	AJMP L_main14
0x053F	0xE531    	MOV A, _state
0x0541	0x6403    	XRL A, #3
0x0543	0x7002    	JNZ #2
0x0545	0x61BA    	AJMP L_main18
0x0547	0xE531    	MOV A, _state
0x0549	0x6404    	XRL A, #4
0x054B	0x7002    	JNZ #2
0x054D	0x61E2    	AJMP L_main22
0x054F	0xE531    	MOV A, _state
0x0551	0x6405    	XRL A, #5
0x0553	0x7002    	JNZ #2
0x0555	0x8107    	AJMP L_main24
0x0557	0xE531    	MOV A, _state
0x0559	0x6406    	XRL A, #6
0x055B	0x7002    	JNZ #2
0x055D	0x813A    	AJMP L_main28
0x055F	0xE531    	MOV A, _state
0x0561	0x6407    	XRL A, #7
0x0563	0x7002    	JNZ #2
0x0565	0x81AD    	AJMP L_main36
L_main9:
;Svetofor.c,108 :: 		DelayMs(100);            // такт работы автомата
0x0567	0x750E64  	MOV FARG_DelayMs_m, #100
0x056A	0x750F00  	MOV FARG_DelayMs_m+1, #0
0x056D	0x119C    	ACALL _DelayMs
;Svetofor.c,109 :: 		if(t==0) T_FLAG=1; else t--;  // счетчик
0x056F	0xE508    	MOV A, _t
0x0571	0x7005    	JNZ L_main44
0x0573	0x753001  	MOV _T_FLAG, #1
0x0576	0x8002    	SJMP L_main45
L_main44:
0x0578	0x1508    	DEC _t
L_main45:
;Svetofor.c,110 :: 		}
0x057A	0x6139    	AJMP L_main6
;Svetofor.c,111 :: 		}
0x057C	0x80FE    	SJMP #254
; end of _main
0x0583	0x7830    	MOV R0, 48
0x0585	0x7905    	MOV R1, 5
0x0587	0x75827E  	MOV DP0L, 126
0x058A	0x758305  	MOV DP0H, 5
0x058D	0x120260  	LCALL 608
0x0590	0x22      	RET
;Svetofor.c,0 :: ?ICS_T_FLAG
0x057E	0x00 ;?ICS_T_FLAG+0
; end of ?ICS_T_FLAG
;Svetofor.c,0 :: ?ICS_state
0x057F	0x01 ;?ICS_state+0
; end of ?ICS_state
;Svetofor.c,0 :: ?ICS_key
0x0580	0x00 ;?ICS_key+0
; end of ?ICS_key
;Svetofor.c,0 :: ?ICS_ms
0x0581	0x0000 ;?ICS_ms+0
; end of ?ICS_ms
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0026      [71]    _translate
0x006D      [47]    _outd
0x009C      [28]    _DelayMs
0x00B8      [90]    _outcw
0x0112      [14]    _rd_EEPROM
0x0120      [93]    _ScanKbd
0x017D     [227]    _init
0x0260       [8]    ___CC2D
0x0268      [25]    _clear_lcd
0x0281      [21]    _wr_EEPROM
0x0296      [49]    _Timer1InterruptHandler
0x02C7      [30]    _INT0_Interrupt
0x02E5     [665]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    R0
0x0001       [1]    R1
0x0002       [1]    R2
0x0003       [1]    R3
0x0004       [1]    R4
0x0005       [1]    R5
0x0006       [1]    R6
0x0007       [1]    R7
0x0008       [1]    _t
0x0009       [1]    _tg
0x000A       [1]    _tr
0x000B       [2]    FARG_wr_EEPROM_addr
0x000B       [1]    ScanKbd_kp_L0
0x000B       [2]    FARG_rd_EEPROM_addr
0x000B       [1]    init_i_L0
0x000B       [1]    clear_lcd_i_L0
0x000C       [1]    ScanKbd_i_L0
0x000D       [1]    FARG_wr_EEPROM_eedata
0x000E       [2]    FARG_DelayMs_m
0x000E       [1]    FARG_outcw_c
0x000E       [1]    FARG_outd_c
0x000F       [1]    outd_i_L0
0x000F       [1]    outcw_i_L0
0x0010       [2]    outcw_j_L0
0x0012       [1]    FARG_translate_c
0x0030       [1]    _T_FLAG
0x0031       [1]    _state
0x0032       [1]    _key
0x0033       [2]    _ms
0x0080       [0]    P0_4_bit
0x0080       [0]    P0_0_bit
0x0080       [1]    P0
0x0080       [0]    P0_1_bit
0x0080       [0]    P0_2_bit
0x0081       [1]    SP
0x0082       [1]    DPL
0x0082       [1]    DP0L
0x0083       [1]    DPH
0x0083       [1]    DP0H
0x0087       [1]    PCON
0x0088       [0]    TR1_bit
0x0088       [0]    TF1_bit
0x0089       [0]    M01_bit
0x0089       [0]    M11_bit
0x0089       [0]    C_T1_bit
0x0089       [0]    GATE1_bit
0x0089       [1]    TMOD
0x008B       [1]    TL1
0x008D       [1]    TH1
0x0090       [0]    P1_0_bit
0x0096       [1]    WMCON
0x0098       [1]    SCON
0x00A0       [1]    P2
0x00A8       [0]    EA_bit
0x00A8       [0]    EX0_bit
0x00A8       [0]    ET1_bit
0x00A8       [0]    ES_bit
0x00B0       [0]    P3_6_bit
0x00B0       [1]    P3
0x00B0       [0]    P3_7_bit
0x00B0       [0]    P3_5_bit
0x00D0       [1]    PSW
0x00E0       [1]    ACC
0x00F0       [1]    B
//** Constants locations ** 
//ADDRESS    SIZE    CONSTANT
//----------------------------------------------
0x057E       [1]    ?ICS_T_FLAG
0x057F       [1]    ?ICS_state
0x0580       [1]    ?ICS_key
0x0581       [2]    ?ICS_ms
//** Label List: ** 
//----------------------------------------------
  L_init0
  L_init1
  L_init2
  L_init3
  L_init4
  L_init5
  L_init6
  L_init7
  L_init8
  L_init9
  L_init10
  L_init11
  L_init12
  L_init13
  L_init14
  L_init15
  L_init16
  L_init17
  L_ScanKbd18
  L_ScanKbd19
  L_ScanKbd20
  L_ScanKbd21
  L_ScanKbd22
  L_ScanKbd23
  L_ScanKbd24
  L_ScanKbd25
  L_ScanKbd26
  L_ScanKbd27
  L_ScanKbd28
  L_ScanKbd29
  L_translate30
  L_translate31
  L_translate32
  L_translate33
  L_translate34
  L_translate35
  L_translate36
  L_translate37
  L_translate38
  L_translate39
  L_clear_lcd40
  L_clear_lcd41
  L_clear_lcd42
  L_outcw43
  L_outcw44
  L_outcw45
  L_outcw46
  L_outcw47
  L_outcw48
  L_outcw49
  L_outcw50
  L_outcw51
  L_outd52
  L_outd53
  L_outd54
  L__outcw55
  _init
  _ScanKbd
  _translate
  _wr_EEPROM
  _rd_EEPROM
  _clear_lcd
  _outcw
  _outd
  L_main0
  L_main1
  L_main2
  L_main3
  L_main4
  L_main5
  L_main6
  L_main7
  L_main8
  L_main9
  L_main10
  L_main11
  L_main12
  L_main13
  L_main14
  L_main15
  L_main16
  L_main17
  L_main18
  L_main19
  L_main20
  L_main21
  L_main22
  L_main23
  L_main24
  L_main25
  L_main26
  L_main27
  L_main28
  L_main29
  L_main30
  L_main31
  L_main32
  L_main33
  L_main34
  L_main35
  L_main36
  L_main37
  L_main38
  L_main39
  L_main40
  L_main41
  L_main42
  L_main43
  L_main44
  L_main45
  L_DelayMs46
  L_DelayMs47
  L__main48
  L__main49
  _main
  _DelayMs
  L__DelayMs50
  _Timer1InterruptHandler
  _INT0_Interrupt
  _CC2D_Loop1
  _CC2PD_Loop1
  _CC2XD_Loop1
  ___DoIFC
  ___CC2D
  ___CC2PD
  ___CC2XD
  L_main0
  L_main1
  L_main2
  L_main3
  L_main4
  L_main5
  L_main6
  L_main7
  L_main8
  L_main9
  L_main10
  L_main11
  L_main12
  L_main13
  L_main14
  L_main15
  L_main16
  L_main17
  L_main18
  L_main19
  L_main20
  L_main21
  L_main22
  L_main23
  L_main24
  L_main25
  L_main26
  L_main27
  L_main28
  L_main29
  L_main30
  L_main31
  L_main32
  L_main33
  L_main34
  L_main35
  L_main36
  L_main37
  L_main38
  L_main39
  L_main40
  L_main41
  L_main42
  L_main43
  L_main44
  L_main45
  L_DelayMs46
  L_DelayMs47
  L__main48
  L__main49
  _main
  _DelayMs
  L__DelayMs50
  _Timer1InterruptHandler
  _INT0_Interrupt
  L_main0
  L_main1
  L_main2
  L_main3
  L_main4
  L_main5
  L_main6
  L_main7
  L_main8
  L_main9
  L_main10
  L_main11
  L_main12
  L_main13
  L_main14
  L_main15
  L_main16
  L_main17
  L_main18
  L_main19
  L_main20
  L_main21
  L_main22
  L_main23
  L_main24
  L_main25
  L_main26
  L_main27
  L_main28
  L_main29
  L_main30
  L_main31
  L_main32
  L_main33
  L_main34
  L_main35
  L_main36
  L_main37
  L_main38
  L_main39
  L_main40
  L_main41
  L_main42
  L_main43
  L_main44
  L_main45
  L_DelayMs46
  L_DelayMs47
  L__main48
  L__main49
  _main
  _DelayMs
  L__DelayMs50
  _Timer1InterruptHandler
  _INT0_Interrupt
