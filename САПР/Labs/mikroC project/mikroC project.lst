;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 26.02.2021 17:33:39
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0x02052B  	LJMP 1323
0x0003	0x0204CF  	LJMP 1231
0x0006	0x00      	NOP
0x0007	0x00      	NOP
0x0008	0x00      	NOP
0x0009	0x00      	NOP
0x000A	0x00      	NOP
0x000B	0x020000  	LJMP 0
0x000E	0x00      	NOP
0x000F	0x00      	NOP
0x0010	0x00      	NOP
0x0011	0x00      	NOP
0x0012	0x00      	NOP
0x0013	0x020653  	LJMP 1619
0x0016	0x00      	NOP
0x0017	0x00      	NOP
0x0018	0x00      	NOP
0x0019	0x00      	NOP
0x001A	0x00      	NOP
0x001B	0x0204FA  	LJMP 1274
0x001E	0x00      	NOP
0x001F	0x00      	NOP
0x0020	0x00      	NOP
0x0021	0x00      	NOP
0x0022	0x00      	NOP
0x0023	0x020000  	LJMP 0
_translate:
;Drv.c,84 :: 		unsigned char translate(unsigned char c){
;Drv.c,85 :: 		switch (c){
0x0026	0x8018    	SJMP L_translate48
;Drv.c,93 :: 		case '?': return 0xA3;
L_translate50:
0x0028	0x78A3    	MOV R0, #163
0x002A	0x22      	RET
;Drv.c,94 :: 		case '?': return 0xA4;
L_translate51:
0x002B	0x78A4    	MOV R0, #164
0x002D	0x22      	RET
;Drv.c,97 :: 		case '?': return 'K';
L_translate52:
0x002E	0x784B    	MOV R0, #75
0x0030	0x22      	RET
;Drv.c,126 :: 		case '?': return 0xB6;
L_translate53:
0x0031	0x78B6    	MOV R0, #182
0x0033	0x22      	RET
;Drv.c,127 :: 		case '?': return 0xB7;
L_translate54:
0x0034	0x78B7    	MOV R0, #183
0x0036	0x22      	RET
;Drv.c,136 :: 		case '?': return 'p';
L_translate55:
0x0037	0x7870    	MOV R0, #112
0x0039	0x22      	RET
;Drv.c,137 :: 		case '?': return 'c';
L_translate56:
0x003A	0x7863    	MOV R0, #99
0x003C	0x22      	RET
;Drv.c,152 :: 		default: return c;
L_translate57:
0x003D	0xA83B    	MOV R0, FARG_translate_c
0x003F	0x22      	RET
;Drv.c,153 :: 		}
L_translate48:
0x0040	0xE53B    	MOV A, FARG_translate_c
0x0042	0x643F    	XRL A, #63
0x0044	0x60E2    	JZ L_translate50
0x0046	0xE53B    	MOV A, FARG_translate_c
0x0048	0x643F    	XRL A, #63
0x004A	0x60DF    	JZ L_translate51
0x004C	0xE53B    	MOV A, FARG_translate_c
0x004E	0x643F    	XRL A, #63
0x0050	0x60DC    	JZ L_translate52
0x0052	0xE53B    	MOV A, FARG_translate_c
0x0054	0x643F    	XRL A, #63
0x0056	0x60D9    	JZ L_translate53
0x0058	0xE53B    	MOV A, FARG_translate_c
0x005A	0x643F    	XRL A, #63
0x005C	0x60D6    	JZ L_translate54
0x005E	0xE53B    	MOV A, FARG_translate_c
0x0060	0x643F    	XRL A, #63
0x0062	0x60D3    	JZ L_translate55
0x0064	0xE53B    	MOV A, FARG_translate_c
0x0066	0x643F    	XRL A, #63
0x0068	0x60D0    	JZ L_translate56
0x006A	0x80D1    	SJMP L_translate57
;Drv.c,154 :: 		}
0x006C	0x22      	RET
; end of _translate
_wr_EEPROM:
;Drv.c,156 :: 		void wr_EEPROM(unsigned int addr,unsigned char eedata)
;Drv.c,159 :: 		DP0L=addr;  //addr1.byte_.l_byte;
0x006D	0x853882  	MOV DP0L, FARG_wr_EEPROM_addr+0
;Drv.c,160 :: 		DP0H=addr>>8;
0x0070	0xA839    	MOV R0, FARG_wr_EEPROM_addr+1
0x0072	0x7900    	MOV R1, #0
0x0074	0x850083  	MOV DP0H, 0
;Drv.c,161 :: 		WMCON|=0x10;
0x0077	0x439610  	ORL WMCON, #16
;Drv.c,162 :: 		ACC = eedata;
0x007A	0x853AE0  	MOV ACC, FARG_wr_EEPROM_eedata+0
;Drv.c,163 :: 		asm  movx @DPTR,A;
0x007D	0xF0      	MOVX @DPTR, A
;Drv.c,164 :: 		WMCON&=0xef;
0x007E	0x5396EF  	ANL WMCON, #239
;Drv.c,165 :: 		}
0x0081	0x22      	RET
; end of _wr_EEPROM
_rd_EEPROM:
;Drv.c,167 :: 		unsigned char rd_EEPROM(unsigned int addr)
;Drv.c,169 :: 		while(!(WMCON&2));
L_rd_EEPROM58:
0x0082	0xE596    	MOV A, WMCON
0x0084	0x5402    	ANL A, #2
0x0086	0x7002    	JNZ L_rd_EEPROM59
0x0088	0x80F8    	SJMP L_rd_EEPROM58
L_rd_EEPROM59:
;Drv.c,170 :: 		DP0L=addr;
0x008A	0x852E82  	MOV DP0L, FARG_rd_EEPROM_addr+0
;Drv.c,171 :: 		DP0H=addr>>8;
0x008D	0xA82F    	MOV R0, FARG_rd_EEPROM_addr+1
0x008F	0x7900    	MOV R1, #0
0x0091	0x850083  	MOV DP0H, 0
;Drv.c,172 :: 		asm movx A,@DPTR;
0x0094	0xE0      	MOVX A, @DPTR
;Drv.c,173 :: 		return ACC;
0x0095	0xA8E0    	MOV R0, ACC
;Drv.c,174 :: 		}
0x0097	0x22      	RET
; end of _rd_EEPROM
_move_left_string:
;mikroC project.c,49 :: 		void move_left_string()
;mikroC project.c,52 :: 		char tmp = buf[0];
0x0098	0x850838  	MOV move_left_string_tmp_L0, _buf+0
;mikroC project.c,53 :: 		for (i = 0; i < 31; i++)
0x009B	0x752E00  	MOV move_left_string_i_L0, #0
0x009E	0x752F00  	MOV move_left_string_i_L0+1, #0
L_move_left_string6:
0x00A1	0xC3      	CLR C
0x00A2	0xE52E    	MOV A, move_left_string_i_L0
0x00A4	0x941F    	SUBB A, #31
0x00A6	0x7400    	MOV A, #0
0x00A8	0x6480    	XRL A, #128
0x00AA	0xF8      	MOV R0, A
0x00AB	0xE52F    	MOV A, move_left_string_i_L0+1
0x00AD	0x6480    	XRL A, #128
0x00AF	0x98      	SUBB A, R0
0x00B0	0x5023    	JNC L_move_left_string7
;mikroC project.c,54 :: 		buf[i] = buf[i + 1];
0x00B2	0x7408    	MOV A, lo_addr(_buf)
0x00B4	0x252E    	ADD A, move_left_string_i_L0
0x00B6	0xF8      	MOV R0, A
0x00B7	0x7401    	MOV A, #1
0x00B9	0x252E    	ADD A, move_left_string_i_L0
0x00BB	0xF9      	MOV R1, A
0x00BC	0x7400    	MOV A, #0
0x00BE	0x352F    	ADDC A, move_left_string_i_L0+1
0x00C0	0xFA      	MOV R2, A
0x00C1	0x7408    	MOV A, lo_addr(_buf)
0x00C3	0x29      	ADD A, R1
0x00C4	0xF9      	MOV R1, A
0x00C5	0xE7      	MOV A, @R1
0x00C6	0xF6      	MOV @R0, A
;mikroC project.c,53 :: 		for (i = 0; i < 31; i++)
0x00C7	0x7401    	MOV A, #1
0x00C9	0x252E    	ADD A, move_left_string_i_L0
0x00CB	0xF52E    	MOV move_left_string_i_L0, A
0x00CD	0x7400    	MOV A, #0
0x00CF	0x352F    	ADDC A, move_left_string_i_L0+1
0x00D1	0xF52F    	MOV move_left_string_i_L0+1, A
;mikroC project.c,54 :: 		buf[i] = buf[i + 1];
0x00D3	0x80CC    	SJMP L_move_left_string6
L_move_left_string7:
;mikroC project.c,55 :: 		buf[31] = tmp;
0x00D5	0x853827  	MOV _buf+31, move_left_string_tmp_L0+0
;mikroC project.c,56 :: 		}
0x00D8	0x22      	RET
; end of _move_left_string
_outcw:
;Drv.c,183 :: 		void outcw(unsigned char c){
;Drv.c,186 :: 		RS = 0;
0x00D9	0xC3      	CLR C
0x00DA	0xE5B0    	MOV A, P3_6_bit
0x00DC	0x92E6    	MOV #224.B6, C
0x00DE	0xF5B0    	MOV P3_6_bit, A
;Drv.c,187 :: 		DB = c;
0x00E0	0x852EA0  	MOV P2, FARG_outcw_c+0
;Drv.c,188 :: 		E = 1;
0x00E3	0xD3      	SETB C
0x00E4	0xE5B0    	MOV A, P3_7_bit
0x00E6	0x92E7    	MOV #224.B7, C
0x00E8	0xF5B0    	MOV P3_7_bit, A
;Drv.c,189 :: 		E = 2;
0x00EA	0xC3      	CLR C
0x00EB	0xE5B0    	MOV A, P3_7_bit
0x00ED	0x92E7    	MOV #224.B7, C
0x00EF	0xF5B0    	MOV P3_7_bit, A
;Drv.c,190 :: 		for (i=0; i<20; i++);
0x00F1	0x752F00  	MOV outcw_i_L0, #0
L_outcw63:
0x00F4	0xC3      	CLR C
0x00F5	0xE52F    	MOV A, outcw_i_L0
0x00F7	0x9414    	SUBB A, #20
0x00F9	0x5004    	JNC L_outcw64
0x00FB	0x052F    	INC outcw_i_L0
0x00FD	0x80F5    	SJMP L_outcw63
L_outcw64:
;Drv.c,191 :: 		if (c==1||c==2||c==3)
0x00FF	0xE52E    	MOV A, FARG_outcw_c
0x0101	0x6401    	XRL A, #1
0x0103	0x600E    	JZ L__outcw75
0x0105	0xE52E    	MOV A, FARG_outcw_c
0x0107	0x6402    	XRL A, #2
0x0109	0x6008    	JZ L__outcw75
0x010B	0xE52E    	MOV A, FARG_outcw_c
0x010D	0x6403    	XRL A, #3
0x010F	0x6002    	JZ L__outcw75
0x0111	0x801F    	SJMP L_outcw68
L__outcw75:
;Drv.c,192 :: 		for (j=0; j<500; j++);
0x0113	0x753800  	MOV outcw_j_L0, #0
0x0116	0x753900  	MOV outcw_j_L0+1, #0
L_outcw69:
0x0119	0xC3      	CLR C
0x011A	0xE538    	MOV A, outcw_j_L0
0x011C	0x94F4    	SUBB A, #244
0x011E	0xE539    	MOV A, outcw_j_L0+1
0x0120	0x9401    	SUBB A, #1
0x0122	0x500E    	JNC L_outcw70
0x0124	0x7401    	MOV A, #1
0x0126	0x2538    	ADD A, outcw_j_L0
0x0128	0xF538    	MOV outcw_j_L0, A
0x012A	0x7400    	MOV A, #0
0x012C	0x3539    	ADDC A, outcw_j_L0+1
0x012E	0xF539    	MOV outcw_j_L0+1, A
0x0130	0x80E7    	SJMP L_outcw69
L_outcw70:
L_outcw68:
;Drv.c,193 :: 		}
0x0132	0x22      	RET
; end of _outcw
_outd:
;Drv.c,195 :: 		void outd(unsigned char c){
;Drv.c,197 :: 		c=translate(c);
0x0133	0x852E3B  	MOV FARG_translate_c, FARG_outd_c+0
0x0136	0x1126    	ACALL _translate
0x0138	0x85002E  	MOV FARG_outd_c, 0
;Drv.c,198 :: 		RS = 1;
0x013B	0xD3      	SETB C
0x013C	0xE5B0    	MOV A, P3_6_bit
0x013E	0x92E6    	MOV #224.B6, C
0x0140	0xF5B0    	MOV P3_6_bit, A
;Drv.c,199 :: 		DB = c;
0x0142	0x8500A0  	MOV P2, 0
;Drv.c,200 :: 		E = 1;
0x0145	0xD3      	SETB C
0x0146	0xE5B0    	MOV A, P3_7_bit
0x0148	0x92E7    	MOV #224.B7, C
0x014A	0xF5B0    	MOV P3_7_bit, A
;Drv.c,201 :: 		E = 2;
0x014C	0xC3      	CLR C
0x014D	0xE5B0    	MOV A, P3_7_bit
0x014F	0x92E7    	MOV #224.B7, C
0x0151	0xF5B0    	MOV P3_7_bit, A
;Drv.c,202 :: 		for (i=0; i<21; i++);
0x0153	0x752F00  	MOV outd_i_L0, #0
L_outd72:
0x0156	0xC3      	CLR C
0x0157	0xE52F    	MOV A, outd_i_L0
0x0159	0x9415    	SUBB A, #21
0x015B	0x5004    	JNC L_outd73
0x015D	0x052F    	INC outd_i_L0
0x015F	0x80F5    	SJMP L_outd72
L_outd73:
;Drv.c,203 :: 		}
0x0161	0x22      	RET
; end of _outd
_DelayMs:
;mikroC project.c,32 :: 		void DelayMs(unsigned int m){  // ???????? ?????? ??????
;mikroC project.c,34 :: 		for(ms=0;ms!=m;ms++) {
0x0162	0x753000  	MOV _ms, #0
0x0165	0x753100  	MOV _ms+1, #0
L_DelayMs0:
0x0168	0xE530    	MOV A, _ms
0x016A	0x652A    	XRL A, FARG_DelayMs_m
0x016C	0x7004    	JNZ L__DelayMs54
0x016E	0xE531    	MOV A, _ms+1
0x0170	0x652B    	XRL A, FARG_DelayMs_m+1
L__DelayMs54:
0x0172	0x6022    	JZ L_DelayMs1
;mikroC project.c,35 :: 		Delay_us(250); Delay_us(250);
0x0174	0x7F67    	MOV R7, 103
0x0176	0xDFFE    	DJNZ R7, PC-2
0x0178	0x00      	NOP
0x0179	0x7F67    	MOV R7, 103
0x017B	0xDFFE    	DJNZ R7, PC-2
0x017D	0x00      	NOP
;mikroC project.c,36 :: 		Delay_us(250); Delay_us(250); // ?????? ???? 1??
0x017E	0x7F67    	MOV R7, 103
0x0180	0xDFFE    	DJNZ R7, PC-2
0x0182	0x00      	NOP
0x0183	0x7F67    	MOV R7, 103
0x0185	0xDFFE    	DJNZ R7, PC-2
0x0187	0x00      	NOP
;mikroC project.c,34 :: 		for(ms=0;ms!=m;ms++) {
0x0188	0x7401    	MOV A, #1
0x018A	0x2530    	ADD A, _ms
0x018C	0xF530    	MOV _ms, A
0x018E	0x7400    	MOV A, #0
0x0190	0x3531    	ADDC A, _ms+1
0x0192	0xF531    	MOV _ms+1, A
;mikroC project.c,38 :: 		}
0x0194	0x80D2    	SJMP L_DelayMs0
L_DelayMs1:
;mikroC project.c,39 :: 		}
0x0196	0x22      	RET
; end of _DelayMs
_write_string:
;mikroC project.c,98 :: 		void write_string()
;mikroC project.c,101 :: 		for (i = 0; i < 32; i++)
0x0197	0x752A00  	MOV write_string_i_L0, #0
0x019A	0x752B00  	MOV write_string_i_L0+1, #0
L_write_string21:
0x019D	0xC3      	CLR C
0x019E	0xE52A    	MOV A, write_string_i_L0
0x01A0	0x9420    	SUBB A, #32
0x01A2	0x7400    	MOV A, #0
0x01A4	0x6480    	XRL A, #128
0x01A6	0xF8      	MOV R0, A
0x01A7	0xE52B    	MOV A, write_string_i_L0+1
0x01A9	0x6480    	XRL A, #128
0x01AB	0x98      	SUBB A, R0
0x01AC	0x501D    	JNC L_write_string22
;mikroC project.c,102 :: 		wr_EEPROM(i, buf[i]);
0x01AE	0x852A38  	MOV FARG_wr_EEPROM_addr, write_string_i_L0+0
0x01B1	0x852B39  	MOV FARG_wr_EEPROM_addr+1, write_string_i_L0+1
0x01B4	0x7408    	MOV A, lo_addr(_buf)
0x01B6	0x252A    	ADD A, write_string_i_L0
0x01B8	0xF8      	MOV R0, A
0x01B9	0x863A    	MOV FARG_wr_EEPROM_eedata, @R0
0x01BB	0x116D    	ACALL _wr_EEPROM
;mikroC project.c,101 :: 		for (i = 0; i < 32; i++)
0x01BD	0x7401    	MOV A, #1
0x01BF	0x252A    	ADD A, write_string_i_L0
0x01C1	0xF52A    	MOV write_string_i_L0, A
0x01C3	0x7400    	MOV A, #0
0x01C5	0x352B    	ADDC A, write_string_i_L0+1
0x01C7	0xF52B    	MOV write_string_i_L0+1, A
;mikroC project.c,102 :: 		wr_EEPROM(i, buf[i]);
0x01C9	0x80D2    	SJMP L_write_string21
L_write_string22:
;mikroC project.c,103 :: 		}
0x01CB	0x22      	RET
; end of _write_string
_show_string:
;mikroC project.c,41 :: 		void show_string()
;mikroC project.c,44 :: 		for (i = 0; i < 32; i++)
0x01CC	0x752A00  	MOV show_string_i_L0, #0
0x01CF	0x752B00  	MOV show_string_i_L0+1, #0
L_show_string3:
0x01D2	0xC3      	CLR C
0x01D3	0xE52A    	MOV A, show_string_i_L0
0x01D5	0x9420    	SUBB A, #32
0x01D7	0x7400    	MOV A, #0
0x01D9	0x6480    	XRL A, #128
0x01DB	0xF8      	MOV R0, A
0x01DC	0xE52B    	MOV A, show_string_i_L0+1
0x01DE	0x6480    	XRL A, #128
0x01E0	0x98      	SUBB A, R0
0x01E1	0x5017    	JNC L_show_string4
;mikroC project.c,45 :: 		outd(buf[i]);
0x01E3	0x7408    	MOV A, lo_addr(_buf)
0x01E5	0x252A    	ADD A, show_string_i_L0
0x01E7	0xF8      	MOV R0, A
0x01E8	0x862E    	MOV FARG_outd_c, @R0
0x01EA	0x3133    	ACALL _outd
;mikroC project.c,44 :: 		for (i = 0; i < 32; i++)
0x01EC	0x7401    	MOV A, #1
0x01EE	0x252A    	ADD A, show_string_i_L0
0x01F0	0xF52A    	MOV show_string_i_L0, A
0x01F2	0x7400    	MOV A, #0
0x01F4	0x352B    	ADDC A, show_string_i_L0+1
0x01F6	0xF52B    	MOV show_string_i_L0+1, A
;mikroC project.c,45 :: 		outd(buf[i]);
0x01F8	0x80D8    	SJMP L_show_string3
L_show_string4:
;mikroC project.c,46 :: 		}
0x01FA	0x22      	RET
; end of _show_string
_Mul_16x16:
;__Lib_Math.c,112 :: 		
;__Lib_Math.c,114 :: 		
0x01FB	0xE8      	MOV A, R0
;__Lib_Math.c,115 :: 		
0x01FC	0x8CF0    	MOV B, R4
;__Lib_Math.c,116 :: 		
0x01FE	0xA4      	MUL AB
;__Lib_Math.c,117 :: 		
0x01FF	0xAFF0    	MOV R7, B
;__Lib_Math.c,118 :: 		
0x0201	0xC8      	XCH A, R0
;__Lib_Math.c,119 :: 		
0x0202	0x8DF0    	MOV B, R5
;__Lib_Math.c,120 :: 		
0x0204	0xA4      	MUL AB
;__Lib_Math.c,121 :: 		
0x0205	0x2F      	ADD A, R7
;__Lib_Math.c,122 :: 		
0x0206	0xC9      	XCH A, R1
;__Lib_Math.c,123 :: 		
0x0207	0x8CF0    	MOV B, R4
;__Lib_Math.c,124 :: 		
0x0209	0xA4      	MUL AB
;__Lib_Math.c,125 :: 		
0x020A	0x29      	ADD A, R1
;__Lib_Math.c,126 :: 		
0x020B	0xF9      	MOV R1, A
;__Lib_Math.c,128 :: 		
0x020C	0x22      	RET
; end of _Mul_16x16
_move_right_string:
;mikroC project.c,59 :: 		void move_right_string()
;mikroC project.c,62 :: 		char tmp = buf[31];
0x020D	0x85272C  	MOV move_right_string_tmp_L0, _buf+31
;mikroC project.c,63 :: 		for (i = 31; i > 0; i--)
0x0210	0x752A1F  	MOV move_right_string_i_L0, #31
0x0213	0x752B00  	MOV move_right_string_i_L0+1, #0
L_move_right_string9:
0x0216	0xD3      	SETB C
0x0217	0xE52A    	MOV A, move_right_string_i_L0
0x0219	0x9400    	SUBB A, #0
0x021B	0x7400    	MOV A, #0
0x021D	0x6480    	XRL A, #128
0x021F	0xF8      	MOV R0, A
0x0220	0xE52B    	MOV A, move_right_string_i_L0+1
0x0222	0x6480    	XRL A, #128
0x0224	0x98      	SUBB A, R0
0x0225	0x4025    	JC L_move_right_string10
;mikroC project.c,64 :: 		buf[i] = buf[i - 1];
0x0227	0x7408    	MOV A, lo_addr(_buf)
0x0229	0x252A    	ADD A, move_right_string_i_L0
0x022B	0xF8      	MOV R0, A
0x022C	0xC3      	CLR C
0x022D	0xE52A    	MOV A, move_right_string_i_L0
0x022F	0x9401    	SUBB A, #1
0x0231	0xF9      	MOV R1, A
0x0232	0xE52B    	MOV A, move_right_string_i_L0+1
0x0234	0x9400    	SUBB A, #0
0x0236	0xFA      	MOV R2, A
0x0237	0x7408    	MOV A, lo_addr(_buf)
0x0239	0x29      	ADD A, R1
0x023A	0xF9      	MOV R1, A
0x023B	0xE7      	MOV A, @R1
0x023C	0xF6      	MOV @R0, A
;mikroC project.c,63 :: 		for (i = 31; i > 0; i--)
0x023D	0xC3      	CLR C
0x023E	0xE52A    	MOV A, move_right_string_i_L0
0x0240	0x9401    	SUBB A, #1
0x0242	0xF52A    	MOV move_right_string_i_L0, A
0x0244	0xE52B    	MOV A, move_right_string_i_L0+1
0x0246	0x9400    	SUBB A, #0
0x0248	0xF52B    	MOV move_right_string_i_L0+1, A
;mikroC project.c,64 :: 		buf[i] = buf[i - 1];
0x024A	0x80CA    	SJMP L_move_right_string9
L_move_right_string10:
;mikroC project.c,65 :: 		buf[0] = tmp;
0x024C	0x852C08  	MOV _buf, move_right_string_tmp_L0+0
;mikroC project.c,66 :: 		}
0x024F	0x22      	RET
; end of _move_right_string
_init:
;Drv.c,5 :: 		void init(void){
;Drv.c,9 :: 		WMCON = 0b11111001;  // Enable WatchDog Timer, set prescaller bits to 111
0x0250	0x7596F9  	MOV WMCON, #249
;Drv.c,12 :: 		WMCON|=0x08;  // internal EEPROM enable
0x0253	0x439608  	ORL WMCON, #8
;Drv.c,13 :: 		WMCON&=0xfb;  // DPTR = DP0
0x0256	0x5396FB  	ANL WMCON, #251
;Drv.c,16 :: 		PCON |= 0x80;        // SMOD=1
0x0259	0x438780  	ORL PCON, #128
;Drv.c,17 :: 		SCON = 0x72;        // mode 1, receiver enable
0x025C	0x759872  	MOV SCON, #114
;Drv.c,18 :: 		TMOD = 0x22;        //Timers 0&1 are 8-bit timers with auto-reload
0x025F	0x758922  	MOV TMOD, #34
;Drv.c,19 :: 		TH1   = 0xF5;        // 9600 baud at 20 MHz
0x0262	0x758DF5  	MOV TH1, #245
;Drv.c,20 :: 		ES_bit = 0;
0x0265	0xC2AC    	CLR ES_bit
;Drv.c,23 :: 		TF1_bit = 0;       // Ensure that Timer1 interrupt flag is cleared
0x0267	0xC28F    	CLR TF1_bit
;Drv.c,24 :: 		ET1_bit = 1;       // Enable Timer1 interrupt
0x0269	0xD2AB    	SETB ET1_bit
;Drv.c,25 :: 		EA_bit  = 1;       // Set global interrupt enable
0x026B	0xD2AF    	SETB EA_bit
;Drv.c,27 :: 		GATE1_bit = 0;     // Clear this flag to enable Timer1 whenever TR1 bit is set.
0x026D	0xC3      	CLR C
0x026E	0xE589    	MOV A, GATE1_bit
0x0270	0x92E7    	MOV #224.B7, C
0x0272	0xF589    	MOV GATE1_bit, A
;Drv.c,28 :: 		C_T1_bit  = 0;     // Set Timer operation: Timer1 counts the divided-down systam clock.
0x0274	0xC3      	CLR C
0x0275	0xE589    	MOV A, C_T1_bit
0x0277	0x92E6    	MOV #224.B6, C
0x0279	0xF589    	MOV C_T1_bit, A
;Drv.c,29 :: 		M11_bit   = 0;     // M11_M01 = 01    =>   Mode 1(16-bit Timer/Counter)
0x027B	0xC3      	CLR C
0x027C	0xE589    	MOV A, M11_bit
0x027E	0x92E5    	MOV #224.B5, C
0x0280	0xF589    	MOV M11_bit, A
;Drv.c,30 :: 		M01_bit   = 1;
0x0282	0xD3      	SETB C
0x0283	0xE589    	MOV A, M01_bit
0x0285	0x92E4    	MOV #224.B4, C
0x0287	0xF589    	MOV M01_bit, A
;Drv.c,32 :: 		TR1_bit = 0;       // Turn off Timer1
0x0289	0xC28E    	CLR TR1_bit
;Drv.c,33 :: 		TH1 = 0xFC;        // Reset Timer1 high byte  65536-1000
0x028B	0x758DFC  	MOV TH1, #252
;Drv.c,34 :: 		TL1 = 0x18;        // Reset Timer1 low byte
0x028E	0x758B18  	MOV TL1, #24
;Drv.c,35 :: 		TR1_bit = 1;       // Run Timer1
0x0291	0xD28E    	SETB TR1_bit
;Drv.c,39 :: 		P3=0xff;
0x0293	0x75B0FF  	MOV P3, #255
;Drv.c,40 :: 		EX0_bit = 1;
0x0296	0xD2A8    	SETB EX0_bit
;Drv.c,44 :: 		delay_ms(30);
0x0298	0x7E31    	MOV R6, 49
0x029A	0x7FA2    	MOV R7, 162
0x029C	0xDFFE    	DJNZ R7, PC-2
0x029E	0xDEFC    	DJNZ R6, PC-4
;Drv.c,45 :: 		RW = 0;
0x02A0	0xC3      	CLR C
0x02A1	0xE5B0    	MOV A, P3_5_bit
0x02A3	0x92E5    	MOV #224.B5, C
0x02A5	0xF5B0    	MOV P3_5_bit, A
;Drv.c,46 :: 		outcw(0x3C);
0x02A7	0x752E3C  	MOV FARG_outcw_c, #60
0x02AA	0x11D9    	ACALL _outcw
;Drv.c,47 :: 		outcw(0x0C);
0x02AC	0x752E0C  	MOV FARG_outcw_c, #12
0x02AF	0x11D9    	ACALL _outcw
;Drv.c,48 :: 		outcw(0x01);
0x02B1	0x752E01  	MOV FARG_outcw_c, #1
0x02B4	0x11D9    	ACALL _outcw
;Drv.c,49 :: 		outcw(0x06);
0x02B6	0x752E06  	MOV FARG_outcw_c, #6
0x02B9	0x11D9    	ACALL _outcw
;Drv.c,50 :: 		outcw(0x40);
0x02BB	0x752E40  	MOV FARG_outcw_c, #64
0x02BE	0x11D9    	ACALL _outcw
;Drv.c,51 :: 		for(i=0;i<8;i++) outd(0);
0x02C0	0x752A00  	MOV init_i_L0, #0
L_init0:
0x02C3	0xC3      	CLR C
0x02C4	0xE52A    	MOV A, init_i_L0
0x02C6	0x9408    	SUBB A, #8
0x02C8	0x5009    	JNC L_init1
0x02CA	0x752E00  	MOV FARG_outd_c, #0
0x02CD	0x3133    	ACALL _outd
0x02CF	0x052A    	INC init_i_L0
0x02D1	0x80F0    	SJMP L_init0
L_init1:
;Drv.c,52 :: 		for(i=0;i<8;i++) outd(0x10);
0x02D3	0x752A00  	MOV init_i_L0, #0
L_init3:
0x02D6	0xC3      	CLR C
0x02D7	0xE52A    	MOV A, init_i_L0
0x02D9	0x9408    	SUBB A, #8
0x02DB	0x5009    	JNC L_init4
0x02DD	0x752E10  	MOV FARG_outd_c, #16
0x02E0	0x3133    	ACALL _outd
0x02E2	0x052A    	INC init_i_L0
0x02E4	0x80F0    	SJMP L_init3
L_init4:
;Drv.c,53 :: 		for(i=0;i<8;i++) outd(0x18);
0x02E6	0x752A00  	MOV init_i_L0, #0
L_init6:
0x02E9	0xC3      	CLR C
0x02EA	0xE52A    	MOV A, init_i_L0
0x02EC	0x9408    	SUBB A, #8
0x02EE	0x5009    	JNC L_init7
0x02F0	0x752E18  	MOV FARG_outd_c, #24
0x02F3	0x3133    	ACALL _outd
0x02F5	0x052A    	INC init_i_L0
0x02F7	0x80F0    	SJMP L_init6
L_init7:
;Drv.c,54 :: 		for(i=0;i<8;i++) outd(0x1C);
0x02F9	0x752A00  	MOV init_i_L0, #0
L_init9:
0x02FC	0xC3      	CLR C
0x02FD	0xE52A    	MOV A, init_i_L0
0x02FF	0x9408    	SUBB A, #8
0x0301	0x5009    	JNC L_init10
0x0303	0x752E1C  	MOV FARG_outd_c, #28
0x0306	0x3133    	ACALL _outd
0x0308	0x052A    	INC init_i_L0
0x030A	0x80F0    	SJMP L_init9
L_init10:
;Drv.c,55 :: 		for(i=0;i<8;i++) outd(0x1E);
0x030C	0x752A00  	MOV init_i_L0, #0
L_init12:
0x030F	0xC3      	CLR C
0x0310	0xE52A    	MOV A, init_i_L0
0x0312	0x9408    	SUBB A, #8
0x0314	0x5009    	JNC L_init13
0x0316	0x752E1E  	MOV FARG_outd_c, #30
0x0319	0x3133    	ACALL _outd
0x031B	0x052A    	INC init_i_L0
0x031D	0x80F0    	SJMP L_init12
L_init13:
;Drv.c,56 :: 		for(i=0;i<8;i++) outd(0x1F);
0x031F	0x752A00  	MOV init_i_L0, #0
L_init15:
0x0322	0xC3      	CLR C
0x0323	0xE52A    	MOV A, init_i_L0
0x0325	0x9408    	SUBB A, #8
0x0327	0x5009    	JNC L_init16
0x0329	0x752E1F  	MOV FARG_outd_c, #31
0x032C	0x3133    	ACALL _outd
0x032E	0x052A    	INC init_i_L0
0x0330	0x80F0    	SJMP L_init15
L_init16:
;Drv.c,57 :: 		}
0x0332	0x22      	RET
; end of _init
_read_string:
;mikroC project.c,105 :: 		void read_string()
;mikroC project.c,108 :: 		for (i = 0; i < 32; i++)
0x0333	0x752A00  	MOV read_string_i_L0, #0
0x0336	0x752B00  	MOV read_string_i_L0+1, #0
L_read_string24:
0x0339	0xC3      	CLR C
0x033A	0xE52A    	MOV A, read_string_i_L0
0x033C	0x9420    	SUBB A, #32
0x033E	0x7400    	MOV A, #0
0x0340	0x6480    	XRL A, #128
0x0342	0xF8      	MOV R0, A
0x0343	0xE52B    	MOV A, read_string_i_L0+1
0x0345	0x6480    	XRL A, #128
0x0347	0x98      	SUBB A, R0
0x0348	0x5025    	JNC L_read_string25
;mikroC project.c,109 :: 		buf[i] = rd_EEPROM(i);
0x034A	0x7408    	MOV A, lo_addr(_buf)
0x034C	0x252A    	ADD A, read_string_i_L0
0x034E	0xF8      	MOV R0, A
0x034F	0x85002D  	MOV FLOC__read_string+1, 0
0x0352	0x852A2E  	MOV FARG_rd_EEPROM_addr, read_string_i_L0+0
0x0355	0x852B2F  	MOV FARG_rd_EEPROM_addr+1, read_string_i_L0+1
0x0358	0x1182    	ACALL _rd_EEPROM
0x035A	0x85002C  	MOV FLOC__read_string, 0
0x035D	0xA82D    	MOV R0, FLOC__read_string+1
0x035F	0xA62C    	MOV @R0, FLOC__read_string
;mikroC project.c,108 :: 		for (i = 0; i < 32; i++)
0x0361	0x7401    	MOV A, #1
0x0363	0x252A    	ADD A, read_string_i_L0
0x0365	0xF52A    	MOV read_string_i_L0, A
0x0367	0x7400    	MOV A, #0
0x0369	0x352B    	ADDC A, read_string_i_L0+1
0x036B	0xF52B    	MOV read_string_i_L0+1, A
;mikroC project.c,109 :: 		buf[i] = rd_EEPROM(i);
0x036D	0x80CA    	SJMP L_read_string24
L_read_string25:
;mikroC project.c,110 :: 		}
0x036F	0x22      	RET
; end of _read_string
_ScanKbd:
;Drv.c,59 :: 		unsigned char ScanKbd(void) {
;Drv.c,61 :: 		unsigned char kp = 0;
0x0370	0x752A00  	MOV ScanKbd_kp_L0, #0
;Drv.c,62 :: 		P0 = P0&0x1F|0xC0;
0x0373	0xE580    	MOV A, P0
0x0375	0x541F    	ANL A, #31
0x0377	0xF8      	MOV R0, A
0x0378	0x44C0    	ORL A, #192
0x037A	0xF580    	MOV P0, A
;Drv.c,63 :: 		for(i=0;i<10;i++);
0x037C	0x752B00  	MOV ScanKbd_i_L0, #0
L_ScanKbd18:
0x037F	0xC3      	CLR C
0x0380	0xE52B    	MOV A, ScanKbd_i_L0
0x0382	0x940A    	SUBB A, #10
0x0384	0x5004    	JNC L_ScanKbd19
0x0386	0x052B    	INC ScanKbd_i_L0
0x0388	0x80F5    	SJMP L_ScanKbd18
L_ScanKbd19:
;Drv.c,64 :: 		if (!P1_0_bit) kp = '7';
0x038A	0x209005  	JB P1_0_bit, L_ScanKbd21
0x038D	0x752A37  	MOV ScanKbd_kp_L0, #55
0x0390	0x8016    	SJMP L_ScanKbd22
L_ScanKbd21:
;Drv.c,65 :: 		else if (!P1_1_bit) kp = '4';
0x0392	0x209105  	JB P1_1_bit, L_ScanKbd23
0x0395	0x752A34  	MOV ScanKbd_kp_L0, #52
0x0398	0x800E    	SJMP L_ScanKbd24
L_ScanKbd23:
;Drv.c,66 :: 		else if (!P1_2_bit) kp = '1';
0x039A	0x209205  	JB P1_2_bit, L_ScanKbd25
0x039D	0x752A31  	MOV ScanKbd_kp_L0, #49
0x03A0	0x8006    	SJMP L_ScanKbd26
L_ScanKbd25:
;Drv.c,67 :: 		else if (!P1_3_bit) kp = '#';
0x03A2	0x209303  	JB P1_3_bit, L_ScanKbd27
0x03A5	0x752A23  	MOV ScanKbd_kp_L0, #35
L_ScanKbd27:
L_ScanKbd26:
L_ScanKbd24:
L_ScanKbd22:
;Drv.c,68 :: 		P0 = P0&0x1F|0xA0;
0x03A8	0xE580    	MOV A, P0
0x03AA	0x541F    	ANL A, #31
0x03AC	0xF8      	MOV R0, A
0x03AD	0x44A0    	ORL A, #160
0x03AF	0xF580    	MOV P0, A
;Drv.c,69 :: 		for(i=0;i<10;i++);
0x03B1	0x752B00  	MOV ScanKbd_i_L0, #0
L_ScanKbd28:
0x03B4	0xC3      	CLR C
0x03B5	0xE52B    	MOV A, ScanKbd_i_L0
0x03B7	0x940A    	SUBB A, #10
0x03B9	0x5004    	JNC L_ScanKbd29
0x03BB	0x052B    	INC ScanKbd_i_L0
0x03BD	0x80F5    	SJMP L_ScanKbd28
L_ScanKbd29:
;Drv.c,70 :: 		if (!P1_0_bit) kp = '8';
0x03BF	0x209005  	JB P1_0_bit, L_ScanKbd31
0x03C2	0x752A38  	MOV ScanKbd_kp_L0, #56
0x03C5	0x8016    	SJMP L_ScanKbd32
L_ScanKbd31:
;Drv.c,71 :: 		else if (!P1_1_bit) kp = '5';
0x03C7	0x209105  	JB P1_1_bit, L_ScanKbd33
0x03CA	0x752A35  	MOV ScanKbd_kp_L0, #53
0x03CD	0x800E    	SJMP L_ScanKbd34
L_ScanKbd33:
;Drv.c,72 :: 		else if (!P1_2_bit) kp = '2';
0x03CF	0x209205  	JB P1_2_bit, L_ScanKbd35
0x03D2	0x752A32  	MOV ScanKbd_kp_L0, #50
0x03D5	0x8006    	SJMP L_ScanKbd36
L_ScanKbd35:
;Drv.c,73 :: 		else if (!P1_3_bit) kp = '0';
0x03D7	0x209303  	JB P1_3_bit, L_ScanKbd37
0x03DA	0x752A30  	MOV ScanKbd_kp_L0, #48
L_ScanKbd37:
L_ScanKbd36:
L_ScanKbd34:
L_ScanKbd32:
;Drv.c,74 :: 		P0 = P0&0x1F|0x60;
0x03DD	0xE580    	MOV A, P0
0x03DF	0x541F    	ANL A, #31
0x03E1	0xF8      	MOV R0, A
0x03E2	0x4460    	ORL A, #96
0x03E4	0xF580    	MOV P0, A
;Drv.c,75 :: 		for(i=0;i<10;i++);
0x03E6	0x752B00  	MOV ScanKbd_i_L0, #0
L_ScanKbd38:
0x03E9	0xC3      	CLR C
0x03EA	0xE52B    	MOV A, ScanKbd_i_L0
0x03EC	0x940A    	SUBB A, #10
0x03EE	0x5004    	JNC L_ScanKbd39
0x03F0	0x052B    	INC ScanKbd_i_L0
0x03F2	0x80F5    	SJMP L_ScanKbd38
L_ScanKbd39:
;Drv.c,76 :: 		if (!P1_0_bit) kp = '9';
0x03F4	0x209005  	JB P1_0_bit, L_ScanKbd41
0x03F7	0x752A39  	MOV ScanKbd_kp_L0, #57
0x03FA	0x8016    	SJMP L_ScanKbd42
L_ScanKbd41:
;Drv.c,77 :: 		else if (!P1_1_bit) kp = '6';
0x03FC	0x209105  	JB P1_1_bit, L_ScanKbd43
0x03FF	0x752A36  	MOV ScanKbd_kp_L0, #54
0x0402	0x800E    	SJMP L_ScanKbd44
L_ScanKbd43:
;Drv.c,78 :: 		else if (!P1_2_bit) kp = '3';
0x0404	0x209205  	JB P1_2_bit, L_ScanKbd45
0x0407	0x752A33  	MOV ScanKbd_kp_L0, #51
0x040A	0x8006    	SJMP L_ScanKbd46
L_ScanKbd45:
;Drv.c,79 :: 		else if (!P1_3_bit) kp = 'e';
0x040C	0x209303  	JB P1_3_bit, L_ScanKbd47
0x040F	0x752A65  	MOV ScanKbd_kp_L0, #101
L_ScanKbd47:
L_ScanKbd46:
L_ScanKbd44:
L_ScanKbd42:
;Drv.c,80 :: 		return kp;
0x0412	0xA82A    	MOV R0, ScanKbd_kp_L0
;Drv.c,81 :: 		}
0x0414	0x22      	RET
; end of _ScanKbd
___CC2D:
;__Lib_System.c,13 :: 		
;__Lib_System.c,15 :: 		
_CC2D_Loop1:
;__Lib_System.c,16 :: 		
0x0415	0xE4      	CLR A
;__Lib_System.c,17 :: 		
0x0416	0x93      	MOVC A, @A+DPTR
;__Lib_System.c,18 :: 		
0x0417	0xF6      	MOV @R0, A
;__Lib_System.c,19 :: 		
0x0418	0x08      	INC R0
;__Lib_System.c,20 :: 		
0x0419	0xA3      	INC DPTR
;__Lib_System.c,21 :: 		
0x041A	0xD9F9    	DJNZ R1, _CC2D_Loop1
;__Lib_System.c,23 :: 		
0x041C	0x22      	RET
; end of ___CC2D
_reset_string:
;mikroC project.c,69 :: 		void reset_string()
;mikroC project.c,71 :: 		while (head_pos > 0) {
L_reset_string12:
0x041D	0xD3      	SETB C
0x041E	0xE532    	MOV A, _head_pos
0x0420	0x9400    	SUBB A, #0
0x0422	0x7400    	MOV A, #0
0x0424	0x6480    	XRL A, #128
0x0426	0xF8      	MOV R0, A
0x0427	0xE533    	MOV A, _head_pos+1
0x0429	0x6480    	XRL A, #128
0x042B	0x98      	SUBB A, R0
0x042C	0x4011    	JC L_reset_string13
;mikroC project.c,72 :: 		move_left_string();
0x042E	0x1198    	ACALL _move_left_string
;mikroC project.c,73 :: 		head_pos--;
0x0430	0xC3      	CLR C
0x0431	0xE532    	MOV A, _head_pos
0x0433	0x9401    	SUBB A, #1
0x0435	0xF532    	MOV _head_pos, A
0x0437	0xE533    	MOV A, _head_pos+1
0x0439	0x9400    	SUBB A, #0
0x043B	0xF533    	MOV _head_pos+1, A
;mikroC project.c,74 :: 		}
0x043D	0x80DE    	SJMP L_reset_string12
L_reset_string13:
;mikroC project.c,75 :: 		}
0x043F	0x22      	RET
; end of _reset_string
_len:
;mikroC project.c,76 :: 		int len()
;mikroC project.c,79 :: 		int ret = 0;
0x0440	0x752A00  	MOV len_ret_L0, #0
0x0443	0x752B00  	MOV len_ret_L0+1, #0
;mikroC project.c,80 :: 		for (i = 0; i < 32; i++)
0x0446	0x752C00  	MOV len_i_L0, #0
0x0449	0x752D00  	MOV len_i_L0+1, #0
L_len14:
0x044C	0xC3      	CLR C
0x044D	0xE52C    	MOV A, len_i_L0
0x044F	0x9420    	SUBB A, #32
0x0451	0x7400    	MOV A, #0
0x0453	0x6480    	XRL A, #128
0x0455	0xF8      	MOV R0, A
0x0456	0xE52D    	MOV A, len_i_L0+1
0x0458	0x6480    	XRL A, #128
0x045A	0x98      	SUBB A, R0
0x045B	0x502B    	JNC L_len15
;mikroC project.c,82 :: 		char tmp = buf[i];
0x045D	0x7408    	MOV A, lo_addr(_buf)
0x045F	0x252C    	ADD A, len_i_L0
0x0461	0xF8      	MOV R0, A
0x0462	0x8601    	MOV R1, @R0
;mikroC project.c,83 :: 		if (tmp == 0x20)
0x0464	0xE9      	MOV A, R1
0x0465	0x6420    	XRL A, #32
0x0467	0x7005    	JNZ L_len17
;mikroC project.c,85 :: 		return ret;
0x0469	0xA82A    	MOV R0, len_ret_L0
0x046B	0xA92B    	MOV R1, len_ret_L0+1
0x046D	0x22      	RET
;mikroC project.c,86 :: 		}
L_len17:
;mikroC project.c,87 :: 		ret++;
0x046E	0x7401    	MOV A, #1
0x0470	0x252A    	ADD A, len_ret_L0
0x0472	0xF52A    	MOV len_ret_L0, A
0x0474	0x7400    	MOV A, #0
0x0476	0x352B    	ADDC A, len_ret_L0+1
0x0478	0xF52B    	MOV len_ret_L0+1, A
;mikroC project.c,80 :: 		for (i = 0; i < 32; i++)
0x047A	0x7401    	MOV A, #1
0x047C	0x252C    	ADD A, len_i_L0
0x047E	0xF52C    	MOV len_i_L0, A
0x0480	0x7400    	MOV A, #0
0x0482	0x352D    	ADDC A, len_i_L0+1
0x0484	0xF52D    	MOV len_i_L0+1, A
;mikroC project.c,88 :: 		}
0x0486	0x80C4    	SJMP L_len14
L_len15:
;mikroC project.c,89 :: 		}
0x0488	0x22      	RET
; end of _len
_clear_lcd:
;Drv.c,176 :: 		void clear_lcd(void){
;Drv.c,178 :: 		outcw(0x80);
0x0489	0x752E80  	MOV FARG_outcw_c, #128
0x048C	0x11D9    	ACALL _outcw
;Drv.c,179 :: 		for(i=0;i<16;i++)
0x048E	0x752A00  	MOV clear_lcd_i_L0, #0
L_clear_lcd60:
0x0491	0xC3      	CLR C
0x0492	0xE52A    	MOV A, clear_lcd_i_L0
0x0494	0x9410    	SUBB A, #16
0x0496	0x5009    	JNC L_clear_lcd61
;Drv.c,180 :: 		outd(' ');
0x0498	0x752E20  	MOV FARG_outd_c, #32
0x049B	0x3133    	ACALL _outd
;Drv.c,179 :: 		for(i=0;i<16;i++)
0x049D	0x052A    	INC clear_lcd_i_L0
;Drv.c,180 :: 		outd(' ');
0x049F	0x80F0    	SJMP L_clear_lcd60
L_clear_lcd61:
;Drv.c,181 :: 		}
0x04A1	0x22      	RET
; end of _clear_lcd
_clear_string:
;mikroC project.c,91 :: 		void clear_string()
;mikroC project.c,94 :: 		for (i = 0; i < 32; i++)
0x04A2	0x752A00  	MOV clear_string_i_L0, #0
0x04A5	0x752B00  	MOV clear_string_i_L0+1, #0
L_clear_string18:
0x04A8	0xC3      	CLR C
0x04A9	0xE52A    	MOV A, clear_string_i_L0
0x04AB	0x9420    	SUBB A, #32
0x04AD	0x7400    	MOV A, #0
0x04AF	0x6480    	XRL A, #128
0x04B1	0xF8      	MOV R0, A
0x04B2	0xE52B    	MOV A, clear_string_i_L0+1
0x04B4	0x6480    	XRL A, #128
0x04B6	0x98      	SUBB A, R0
0x04B7	0x5015    	JNC L_clear_string19
;mikroC project.c,95 :: 		buf[i] = ' ';
0x04B9	0x7408    	MOV A, lo_addr(_buf)
0x04BB	0x252A    	ADD A, clear_string_i_L0
0x04BD	0xF8      	MOV R0, A
0x04BE	0x7620    	MOV @R0, #32
;mikroC project.c,94 :: 		for (i = 0; i < 32; i++)
0x04C0	0x7401    	MOV A, #1
0x04C2	0x252A    	ADD A, clear_string_i_L0
0x04C4	0xF52A    	MOV clear_string_i_L0, A
0x04C6	0x7400    	MOV A, #0
0x04C8	0x352B    	ADDC A, clear_string_i_L0+1
0x04CA	0xF52B    	MOV clear_string_i_L0+1, A
;mikroC project.c,95 :: 		buf[i] = ' ';
0x04CC	0x80DA    	SJMP L_clear_string18
L_clear_string19:
;mikroC project.c,96 :: 		}
0x04CE	0x22      	RET
; end of _clear_string
_INT0_Interrupt:
0x04CF	0xC000    	PUSH R0
0x04D1	0xC0D0    	PUSH PSW
0x04D3	0xC0E0    	PUSH ACC
0x04D5	0xC0F0    	PUSH B
0x04D7	0xC082    	PUSH DP0L
0x04D9	0xC083    	PUSH DP0H
;mikroC project.c,129 :: 		void INT0_Interrupt() org IVT_ADDR_EX0
;mikroC project.c,131 :: 		EA_bit = 0;
0x04DB	0xC2AF    	CLR EA_bit
;mikroC project.c,132 :: 		lcd_led = ~lcd_led;
0x04DD	0xA284    	MOV C, P0_4_bit
0x04DF	0xB3      	CPL C
0x04E0	0x9284    	MOV P0_4_bit, C
;mikroC project.c,133 :: 		if (state == S_MOVING)
0x04E2	0xE534    	MOV A, _state
0x04E4	0x6402    	XRL A, #2
0x04E6	0x7003    	JNZ L_INT0_Interrupt27
;mikroC project.c,134 :: 		state = S_INIT;
0x04E8	0x753400  	MOV _state, #0
L_INT0_Interrupt27:
;mikroC project.c,135 :: 		EA_bit = 1;
0x04EB	0xD2AF    	SETB EA_bit
;mikroC project.c,136 :: 		}
0x04ED	0xD083    	POP DP0H
0x04EF	0xD082    	POP DP0L
0x04F1	0xD0F0    	POP B
0x04F3	0xD0E0    	POP ACC
0x04F5	0xD0D0    	POP PSW
0x04F7	0xD000    	POP R0
0x04F9	0x32      	RETI
; end of _INT0_Interrupt
_Timer1InterruptHandler:
0x04FA	0xC0D0    	PUSH PSW
0x04FC	0xC0E0    	PUSH ACC
0x04FE	0xC0F0    	PUSH B
0x0500	0xC082    	PUSH DP0L
0x0502	0xC083    	PUSH DP0H
;mikroC project.c,112 :: 		void Timer1InterruptHandler() org IVT_ADDR_ET1
;mikroC project.c,115 :: 		EA_bit = 0;  // Clear global interrupt enable flag
0x0504	0xC2AF    	CLR EA_bit
;mikroC project.c,116 :: 		TF1_bit = 0; // Ensure that Timer1 interrupt flag is cleared
0x0506	0xC28F    	CLR TF1_bit
;mikroC project.c,118 :: 		TR1_bit = 0; // Stop Timer1
0x0508	0xC28E    	CLR TR1_bit
;mikroC project.c,119 :: 		TH1 = 0xFC;  // Reset Timer1 high byte  65536-1000
0x050A	0x758DFC  	MOV TH1, #252
;mikroC project.c,120 :: 		TL1 = 0x18;  // Reset Timer1 low byte
0x050D	0x758B18  	MOV TL1, #24
;mikroC project.c,123 :: 		ms++;
0x0510	0x7401    	MOV A, #1
0x0512	0x2530    	ADD A, _ms
0x0514	0xF530    	MOV _ms, A
0x0516	0x7400    	MOV A, #0
0x0518	0x3531    	ADDC A, _ms+1
0x051A	0xF531    	MOV _ms+1, A
;mikroC project.c,125 :: 		EA_bit = 1;  // Set global interrupt enable flag
0x051C	0xD2AF    	SETB EA_bit
;mikroC project.c,126 :: 		TR1_bit = 1; // Run Timer1
0x051E	0xD28E    	SETB TR1_bit
;mikroC project.c,127 :: 		}
0x0520	0xD083    	POP DP0H
0x0522	0xD082    	POP DP0L
0x0524	0xD0F0    	POP B
0x0526	0xD0E0    	POP ACC
0x0528	0xD0D0    	POP PSW
0x052A	0x32      	RETI
; end of _Timer1InterruptHandler
_main:
0x052B	0x758180  	MOV SP, #128
0x052E	0x120684  	LCALL 1668
;mikroC project.c,147 :: 		void main()
;mikroC project.c,149 :: 		init();
0x0531	0x5150    	ACALL _init
;mikroC project.c,150 :: 		clear_lcd();
0x0533	0x9189    	ACALL _clear_lcd
;mikroC project.c,151 :: 		read_string();
0x0535	0x7133    	ACALL _read_string
;mikroC project.c,152 :: 		speed = rd_EEPROM(32);
0x0537	0x752E20  	MOV FARG_rd_EEPROM_addr, #32
0x053A	0x752F00  	MOV FARG_rd_EEPROM_addr+1, #0
0x053D	0x1182    	ACALL _rd_EEPROM
0x053F	0x850036  	MOV _speed, 0
0x0542	0xE4      	CLR A
0x0543	0xF537    	MOV _speed+1, A
;mikroC project.c,153 :: 		if (!speed)
0x0545	0xE536    	MOV A, _speed
0x0547	0x4537    	ORL A, _speed+1
0x0549	0x7008    	JNZ L_main29
;mikroC project.c,154 :: 		speed = 10;
0x054B	0x75360A  	MOV _speed, #10
0x054E	0x753700  	MOV _speed+1, #0
0x0551	0x8017    	SJMP L_main30
L_main29:
;mikroC project.c,155 :: 		else if (speed > 100) speed = 100;
0x0553	0xD3      	SETB C
0x0554	0xE536    	MOV A, _speed
0x0556	0x9464    	SUBB A, #100
0x0558	0x7400    	MOV A, #0
0x055A	0x6480    	XRL A, #128
0x055C	0xF8      	MOV R0, A
0x055D	0xE537    	MOV A, _speed+1
0x055F	0x6480    	XRL A, #128
0x0561	0x98      	SUBB A, R0
0x0562	0x4006    	JC L_main31
0x0564	0x753664  	MOV _speed, #100
0x0567	0x753700  	MOV _speed+1, #0
L_main31:
L_main30:
;mikroC project.c,157 :: 		while (1)
L_main32:
;mikroC project.c,159 :: 		key = ScanKbd();
0x056A	0x7170    	ACALL _ScanKbd
0x056C	0x850035  	MOV _key, 0
;mikroC project.c,160 :: 		switch (state)
0x056F	0xC129    	AJMP L_main34
;mikroC project.c,162 :: 		case S_INIT:
L_main36:
;mikroC project.c,163 :: 		reset_string();
0x0571	0x911D    	ACALL _reset_string
;mikroC project.c,164 :: 		clear_lcd();
0x0573	0x9189    	ACALL _clear_lcd
;mikroC project.c,165 :: 		outcw(0x80);
0x0575	0x752E80  	MOV FARG_outcw_c, #128
0x0578	0x11D9    	ACALL _outcw
;mikroC project.c,166 :: 		show_string();
0x057A	0x31CC    	ACALL _show_string
;mikroC project.c,167 :: 		if (key == KEY_UP)
0x057C	0xE535    	MOV A, _key
0x057E	0x6465    	XRL A, #101
0x0580	0x7005    	JNZ L_main37
;mikroC project.c,169 :: 		write_string();
0x0582	0x3197    	ACALL _write_string
;mikroC project.c,170 :: 		state = S_MOVING;
0x0584	0x753402  	MOV _state, #2
;mikroC project.c,171 :: 		}
L_main37:
;mikroC project.c,172 :: 		if (key >= '0' && key <= '9')
0x0587	0xC3      	CLR C
0x0588	0xE535    	MOV A, _key
0x058A	0x9430    	SUBB A, #48
0x058C	0x4016    	JC L_main40
0x058E	0xD3      	SETB C
0x058F	0xE535    	MOV A, _key
0x0591	0x9439    	SUBB A, #57
0x0593	0x500F    	JNC L_main40
L__main53:
;mikroC project.c,174 :: 		buf[len()] = key;
0x0595	0x9140    	ACALL _len
0x0597	0x850028  	MOV FLOC__main, 0
0x059A	0x850129  	MOV FLOC__main+1, 1
0x059D	0x7408    	MOV A, lo_addr(_buf)
0x059F	0x2528    	ADD A, FLOC__main
0x05A1	0xF8      	MOV R0, A
0x05A2	0xA635    	MOV @R0, _key
;mikroC project.c,175 :: 		}
L_main40:
;mikroC project.c,176 :: 		if (key == KEY_DOWN)
0x05A4	0xE535    	MOV A, _key
0x05A6	0x6423    	XRL A, #35
0x05A8	0x7002    	JNZ L_main41
;mikroC project.c,177 :: 		clear_string();
0x05AA	0x91A2    	ACALL _clear_string
L_main41:
;mikroC project.c,178 :: 		break;
0x05AC	0xC13D    	AJMP L_main35
;mikroC project.c,180 :: 		case S_MOVING:
L_main42:
;mikroC project.c,181 :: 		clear_lcd();
0x05AE	0x9189    	ACALL _clear_lcd
;mikroC project.c,182 :: 		move_right_string();
0x05B0	0x510D    	ACALL _move_right_string
;mikroC project.c,183 :: 		head_pos++;
0x05B2	0x7401    	MOV A, #1
0x05B4	0x2532    	ADD A, _head_pos
0x05B6	0xF532    	MOV _head_pos, A
0x05B8	0x7400    	MOV A, #0
0x05BA	0x3533    	ADDC A, _head_pos+1
0x05BC	0xF533    	MOV _head_pos+1, A
;mikroC project.c,184 :: 		if (head_pos == 32) head_pos = 0;
0x05BE	0x7420    	MOV A, #32
0x05C0	0x6532    	XRL A, _head_pos
0x05C2	0x7004    	JNZ L__main55
0x05C4	0x7400    	MOV A, #0
0x05C6	0x6533    	XRL A, _head_pos+1
L__main55:
0x05C8	0x7006    	JNZ L_main43
0x05CA	0x753200  	MOV _head_pos, #0
0x05CD	0x753300  	MOV _head_pos+1, #0
L_main43:
;mikroC project.c,185 :: 		outcw(0x80);
0x05D0	0x752E80  	MOV FARG_outcw_c, #128
0x05D3	0x11D9    	ACALL _outcw
;mikroC project.c,186 :: 		show_string();
0x05D5	0x31CC    	ACALL _show_string
;mikroC project.c,187 :: 		break;
0x05D7	0x8064    	SJMP L_main35
;mikroC project.c,188 :: 		case S_CHANGE_SPEED:
L_main44:
;mikroC project.c,189 :: 		clear_lcd();
0x05D9	0x9189    	ACALL _clear_lcd
;mikroC project.c,190 :: 		outcw(0x80);
0x05DB	0x752E80  	MOV FARG_outcw_c, #128
0x05DE	0x11D9    	ACALL _outcw
;mikroC project.c,191 :: 		if ((key == KEY_UP) && (speed > 10))
0x05E0	0xE535    	MOV A, _key
0x05E2	0x6465    	XRL A, #101
0x05E4	0x701E    	JNZ L_main47
0x05E6	0xD3      	SETB C
0x05E7	0xE536    	MOV A, _speed
0x05E9	0x940A    	SUBB A, #10
0x05EB	0x7400    	MOV A, #0
0x05ED	0x6480    	XRL A, #128
0x05EF	0xF8      	MOV R0, A
0x05F0	0xE537    	MOV A, _speed+1
0x05F2	0x6480    	XRL A, #128
0x05F4	0x98      	SUBB A, R0
0x05F5	0x400D    	JC L_main47
L__main52:
;mikroC project.c,193 :: 		speed -= 10;
0x05F7	0xC3      	CLR C
0x05F8	0xE536    	MOV A, _speed
0x05FA	0x940A    	SUBB A, #10
0x05FC	0xF536    	MOV _speed, A
0x05FE	0xE537    	MOV A, _speed+1
0x0600	0x9400    	SUBB A, #0
0x0602	0xF537    	MOV _speed+1, A
;mikroC project.c,194 :: 		}
L_main47:
;mikroC project.c,195 :: 		if ((key == KEY_DOWN) && (speed < 100))
0x0604	0xE535    	MOV A, _key
0x0606	0x6423    	XRL A, #35
0x0608	0x701D    	JNZ L_main50
0x060A	0xC3      	CLR C
0x060B	0xE536    	MOV A, _speed
0x060D	0x9464    	SUBB A, #100
0x060F	0x7400    	MOV A, #0
0x0611	0x6480    	XRL A, #128
0x0613	0xF8      	MOV R0, A
0x0614	0xE537    	MOV A, _speed+1
0x0616	0x6480    	XRL A, #128
0x0618	0x98      	SUBB A, R0
0x0619	0x500C    	JNC L_main50
L__main51:
;mikroC project.c,197 :: 		speed += 10;
0x061B	0x740A    	MOV A, #10
0x061D	0x2536    	ADD A, _speed
0x061F	0xF536    	MOV _speed, A
0x0621	0x7400    	MOV A, #0
0x0623	0x3537    	ADDC A, _speed+1
0x0625	0xF537    	MOV _speed+1, A
;mikroC project.c,198 :: 		}
L_main50:
;mikroC project.c,199 :: 		break;
0x0627	0x8014    	SJMP L_main35
;mikroC project.c,200 :: 		}
L_main34:
0x0629	0xE534    	MOV A, _state
0x062B	0x7002    	JNZ #2
0x062D	0xA171    	AJMP L_main36
0x062F	0xE534    	MOV A, _state
0x0631	0x6402    	XRL A, #2
0x0633	0x7002    	JNZ #2
0x0635	0xA1AE    	AJMP L_main42
0x0637	0xE534    	MOV A, _state
0x0639	0x6401    	XRL A, #1
0x063B	0x609C    	JZ L_main44
L_main35:
;mikroC project.c,201 :: 		DelayMs(speed * 5);
0x063D	0xA836    	MOV R0, _speed
0x063F	0xA937    	MOV R1, _speed+1
0x0641	0x7C05    	MOV R4, #5
0x0643	0x7D00    	MOV R5, #0
0x0645	0x31FB    	ACALL _Mul_16x16
0x0647	0x85002A  	MOV FARG_DelayMs_m, 0
0x064A	0x85012B  	MOV FARG_DelayMs_m+1, 1
0x064D	0x3162    	ACALL _DelayMs
;mikroC project.c,202 :: 		}
0x064F	0xA16A    	AJMP L_main32
;mikroC project.c,203 :: 		}
0x0651	0x80FE    	SJMP #254
; end of _main
_INT1_Interrupt:
0x0653	0xC000    	PUSH R0
0x0655	0xC0D0    	PUSH PSW
0x0657	0xC0E0    	PUSH ACC
0x0659	0xC0F0    	PUSH B
0x065B	0xC082    	PUSH DP0L
0x065D	0xC083    	PUSH DP0H
;mikroC project.c,138 :: 		void INT1_Interrupt() org IVT_ADDR_EX1
;mikroC project.c,140 :: 		EA_bit = 0;
0x065F	0xC2AF    	CLR EA_bit
;mikroC project.c,141 :: 		lcd_led = ~lcd_led;
0x0661	0xA284    	MOV C, P0_4_bit
0x0663	0xB3      	CPL C
0x0664	0x9284    	MOV P0_4_bit, C
;mikroC project.c,142 :: 		if (state == S_INIT)
0x0666	0xE534    	MOV A, _state
0x0668	0x7003    	JNZ L_INT1_Interrupt28
;mikroC project.c,143 :: 		state = S_CHANGE_SPEED;
0x066A	0x753401  	MOV _state, #1
L_INT1_Interrupt28:
;mikroC project.c,144 :: 		EA_bit = 1;
0x066D	0xD2AF    	SETB EA_bit
;mikroC project.c,145 :: 		}
0x066F	0xD083    	POP DP0H
0x0671	0xD082    	POP DP0L
0x0673	0xD0F0    	POP B
0x0675	0xD0E0    	POP ACC
0x0677	0xD0D0    	POP PSW
0x0679	0xD000    	POP R0
0x067B	0x32      	RETI
; end of _INT1_Interrupt
0x0684	0x7830    	MOV R0, 48
0x0686	0x7908    	MOV R1, 8
0x0688	0x75827C  	MOV DP0L, 124
0x068B	0x758306  	MOV DP0H, 6
0x068E	0x120415  	LCALL 1045
0x0691	0x22      	RET
;mikroC project.c,0 :: ?ICS_ms
0x067C	0x0000 ;?ICS_ms+0
; end of ?ICS_ms
;mikroC project.c,0 :: ?ICS_head_pos
0x067E	0x0000 ;?ICS_head_pos+0
; end of ?ICS_head_pos
;mikroC project.c,0 :: ?ICS_state
0x0680	0x00 ;?ICS_state+0
; end of ?ICS_state
;mikroC project.c,0 :: ?ICS_key
0x0681	0x00 ;?ICS_key+0
; end of ?ICS_key
;mikroC project.c,0 :: ?ICS_speed
0x0682	0x6400 ;?ICS_speed+0
; end of ?ICS_speed
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0026      [71]    _translate
0x006D      [21]    _wr_EEPROM
0x0082      [22]    _rd_EEPROM
0x0098      [65]    _move_left_string
0x00D9      [90]    _outcw
0x0133      [47]    _outd
0x0162      [53]    _DelayMs
0x0197      [53]    _write_string
0x01CC      [47]    _show_string
0x01FB      [18]    _Mul_16x16
0x020D      [67]    _move_right_string
0x0250     [227]    _init
0x0333      [61]    _read_string
0x0370     [165]    _ScanKbd
0x0415       [8]    ___CC2D
0x041D      [35]    _reset_string
0x0440      [73]    _len
0x0489      [25]    _clear_lcd
0x04A2      [45]    _clear_string
0x04CF      [43]    _INT0_Interrupt
0x04FA      [49]    _Timer1InterruptHandler
0x052B     [296]    _main
0x0653      [41]    _INT1_Interrupt
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    R0
0x0001       [1]    R1
0x0002       [1]    R2
0x0003       [1]    R3
0x0004       [1]    R4
0x0005       [1]    R5
0x0006       [1]    R6
0x0007       [1]    R7
0x0008      [32]    _buf
0x0028       [2]    FLOC__main
0x002A       [1]    init_i_L0
0x002A       [1]    clear_lcd_i_L0
0x002A       [1]    ScanKbd_kp_L0
0x002A       [2]    move_right_string_i_L0
0x002A       [2]    len_ret_L0
0x002A       [2]    FARG_DelayMs_m
0x002A       [2]    show_string_i_L0
0x002A       [2]    read_string_i_L0
0x002A       [2]    write_string_i_L0
0x002A       [2]    clear_string_i_L0
0x002B       [1]    ScanKbd_i_L0
0x002C       [2]    FLOC__read_string
0x002C       [2]    len_i_L0
0x002C       [1]    move_right_string_tmp_L0
0x002E       [2]    FARG_rd_EEPROM_addr
0x002E       [2]    move_left_string_i_L0
0x002E       [1]    FARG_outcw_c
0x002E       [1]    FARG_outd_c
0x002F       [1]    outcw_i_L0
0x002F       [1]    outd_i_L0
0x0030       [2]    _ms
0x0032       [2]    _head_pos
0x0034       [1]    _state
0x0035       [1]    _key
0x0036       [2]    _speed
0x0038       [1]    move_left_string_tmp_L0
0x0038       [2]    outcw_j_L0
0x0038       [2]    FARG_wr_EEPROM_addr
0x003A       [1]    FARG_wr_EEPROM_eedata
0x003B       [1]    FARG_translate_c
0x0080       [0]    P0_4_bit
0x0080       [1]    P0
0x0081       [1]    SP
0x0082       [1]    DP0L
0x0082       [1]    DPL
0x0083       [1]    DP0H
0x0083       [1]    DPH
0x0087       [1]    PCON
0x0088       [0]    TF1_bit
0x0088       [0]    TR1_bit
0x0089       [0]    M11_bit
0x0089       [0]    M01_bit
0x0089       [0]    GATE1_bit
0x0089       [0]    C_T1_bit
0x0089       [1]    TMOD
0x008B       [1]    TL1
0x008D       [1]    TH1
0x0090       [0]    P1_0_bit
0x0090       [0]    P1_1_bit
0x0090       [0]    P1_3_bit
0x0090       [0]    P1_2_bit
0x0096       [1]    WMCON
0x0098       [1]    SCON
0x00A0       [1]    P2
0x00A8       [0]    ES_bit
0x00A8       [0]    EA_bit
0x00A8       [0]    ET1_bit
0x00A8       [0]    EX0_bit
0x00B0       [0]    P3_5_bit
0x00B0       [1]    P3
0x00B0       [0]    P3_6_bit
0x00B0       [0]    P3_7_bit
0x00D0       [1]    PSW
0x00E0       [1]    ACC
0x00F0       [1]    B
//** Constants locations ** 
//ADDRESS    SIZE    CONSTANT
//----------------------------------------------
0x067C       [2]    ?ICS_ms
0x067E       [2]    ?ICS_head_pos
0x0680       [1]    ?ICS_state
0x0681       [1]    ?ICS_key
0x0682       [2]    ?ICS_speed
//** Label List: ** 
//----------------------------------------------
  L_init0
  L_init1
  L_init2
  L_init3
  L_init4
  L_init5
  L_init6
  L_init7
  L_init8
  L_init9
  L_init10
  L_init11
  L_init12
  L_init13
  L_init14
  L_init15
  L_init16
  L_init17
  L_ScanKbd18
  L_ScanKbd19
  L_ScanKbd20
  L_ScanKbd21
  L_ScanKbd22
  L_ScanKbd23
  L_ScanKbd24
  L_ScanKbd25
  L_ScanKbd26
  L_ScanKbd27
  L_ScanKbd28
  L_ScanKbd29
  L_ScanKbd30
  L_ScanKbd31
  L_ScanKbd32
  L_ScanKbd33
  L_ScanKbd34
  L_ScanKbd35
  L_ScanKbd36
  L_ScanKbd37
  L_ScanKbd38
  L_ScanKbd39
  L_ScanKbd40
  L_ScanKbd41
  L_ScanKbd42
  L_ScanKbd43
  L_ScanKbd44
  L_ScanKbd45
  L_ScanKbd46
  L_ScanKbd47
  L_translate48
  L_translate49
  L_translate50
  L_translate51
  L_translate52
  L_translate53
  L_translate54
  L_translate55
  L_translate56
  L_translate57
  L_rd_EEPROM58
  L_rd_EEPROM59
  L_clear_lcd60
  L_clear_lcd61
  L_clear_lcd62
  L_outcw63
  L_outcw64
  L_outcw65
  L_outcw66
  L_outcw67
  L_outcw68
  L_outcw69
  L_outcw70
  L_outcw71
  L_outd72
  L_outd73
  L_outd74
  L__outcw75
  _init
  _ScanKbd
  _translate
  _wr_EEPROM
  _rd_EEPROM
  _clear_lcd
  _outcw
  _outd
  L_DelayMs0
  L_DelayMs1
  L_DelayMs2
  L_show_string3
  L_show_string4
  L_show_string5
  L_move_left_string6
  L_move_left_string7
  L_move_left_string8
  L_move_right_string9
  L_move_right_string10
  L_move_right_string11
  L_reset_string12
  L_reset_string13
  L_len14
  L_len15
  L_len16
  L_len17
  L_clear_string18
  L_clear_string19
  L_clear_string20
  L_write_string21
  L_write_string22
  L_write_string23
  L_read_string24
  L_read_string25
  L_read_string26
  L_INT0_Interrupt27
  L_INT1_Interrupt28
  L_main29
  L_main30
  L_main31
  L_main32
  L_main33
  L_main34
  L_main35
  L_main36
  L_main37
  L_main38
  L_main39
  L_main40
  L_main41
  L_main42
  L_main43
  L_main44
  L_main45
  L_main46
  L_main47
  L_main48
  L_main49
  L_main50
  L__main51
  L__main52
  L__main53
  _DelayMs
  L__DelayMs54
  _show_string
  _move_left_string
  _move_right_string
  _reset_string
  _len
  _clear_string
  _write_string
  _read_string
  _Timer1InterruptHandler
  _INT0_Interrupt
  _INT1_Interrupt
  _main
  L__main55
  lab_end
  loop_lab
  lab_end1
  lab_loop1
  lab_end2
  lab_loop3
  __Div_8x8_S_Bpositive
  __Div_8x8_S_Apositive
  __Div_8x8_S_Skip_Div
  __Div_8x8_S_div_ret
  __op2hi_not_zero
  __op1hi_not_zero
  __Div_16x16_U_Loop1
  __Div_16x16_U_Lab1
  __Div_16x16_U_div_ret
  __Div_16x16_U_Loop2
  __Div_16x16_U_Lab2
  __Div_16x16_U_Lab3
  __Div_16x16_S_op2hipositive
  __Div_16x16_S_op1hipositive
  __Div_16x16_S_Skip_Udiv
  __Div_16x16_S_div_ret
  __Div_32x32_U_start
  __Div_32x32_U_aux
  __Div_32x32_U_l2
  __Div_32x32_U_l1
  lw_1
  lw_2
  __Div_32x32_U_l3
  lw_3
  __Div_32x32_U_l4
  __Div_32x32_U_IR_l0
  __Div_32x32_U_l5
  __Div_32x32_U_l6
  __Div_32x32_U_l8
  __Div_32x32_U_l7
  __Div_32x32_U_IR_l1
  __Div_32x32_U_l10
  __Div_32x32_U_l9
  __Div_32x32_U_IR_l2
  __Div_32x32_S_l1
  __Div_32x32_S_call_uns
  __Div_32x32_S_l2
  __Div_32x32_S_l3
  __Div_32x32_S_div_ret
  __shl_long
  __shr_longint
  __shr_longword
  _Mul_16x16
  _Mul_32x32
  _Div_8x8_S
  _Div_16x16_U
  _Div_16x16_S
  _Div_32x32_U
  _Div_32x32_S
  _CC2D_Loop1
  _CC2PD_Loop1
  _CC2XD_Loop1
  ___DoIFC
  ___CC2D
  ___CC2PD
  ___CC2XD
  L_DelayMs0
  L_DelayMs1
  L_DelayMs2
  L_show_string3
  L_show_string4
  L_show_string5
  L_move_left_string6
  L_move_left_string7
  L_move_left_string8
  L_move_right_string9
  L_move_right_string10
  L_move_right_string11
  L_reset_string12
  L_reset_string13
  L_len14
  L_len15
  L_len16
  L_len17
  L_clear_string18
  L_clear_string19
  L_clear_string20
  L_write_string21
  L_write_string22
  L_write_string23
  L_read_string24
  L_read_string25
  L_read_string26
  L_INT0_Interrupt27
  L_INT1_Interrupt28
  L_main29
  L_main30
  L_main31
  L_main32
  L_main33
  L_main34
  L_main35
  L_main36
  L_main37
  L_main38
  L_main39
  L_main40
  L_main41
  L_main42
  L_main43
  L_main44
  L_main45
  L_main46
  L_main47
  L_main48
  L_main49
  L_main50
  L__main51
  L__main52
  L__main53
  _DelayMs
  L__DelayMs54
  _show_string
  _move_left_string
  _move_right_string
  _reset_string
  _len
  _clear_string
  _write_string
  _read_string
  _Timer1InterruptHandler
  _INT0_Interrupt
  _INT1_Interrupt
  _main
  L__main55
  L_DelayMs0
  L_DelayMs1
  L_DelayMs2
  L_show_string3
  L_show_string4
  L_show_string5
  L_move_left_string6
  L_move_left_string7
  L_move_left_string8
  L_move_right_string9
  L_move_right_string10
  L_move_right_string11
  L_reset_string12
  L_reset_string13
  L_len14
  L_len15
  L_len16
  L_len17
  L_clear_string18
  L_clear_string19
  L_clear_string20
  L_write_string21
  L_write_string22
  L_write_string23
  L_read_string24
  L_read_string25
  L_read_string26
  L_INT0_Interrupt27
  L_INT1_Interrupt28
  L_main29
  L_main30
  L_main31
  L_main32
  L_main33
  L_main34
  L_main35
  L_main36
  L_main37
  L_main38
  L_main39
  L_main40
  L_main41
  L_main42
  L_main43
  L_main44
  L_main45
  L_main46
  L_main47
  L_main48
  L_main49
  L_main50
  L__main51
  L__main52
  L__main53
  _DelayMs
  L__DelayMs54
  _show_string
  _move_left_string
  _move_right_string
  _reset_string
  _len
  _clear_string
  _write_string
  _read_string
  _Timer1InterruptHandler
  _INT0_Interrupt
  _INT1_Interrupt
  _main
  L__main55
  L_DelayMs0
  L_DelayMs1
  L_DelayMs2
  L_show_string3
  L_show_string4
  L_show_string5
  L_move_left_string6
  L_move_left_string7
  L_move_left_string8
  L_move_right_string9
  L_move_right_string10
  L_move_right_string11
  L_reset_string12
  L_reset_string13
  L_len14
  L_len15
  L_len16
  L_len17
  L_clear_string18
  L_clear_string19
  L_clear_string20
  L_write_string21
  L_write_string22
  L_write_string23
  L_read_string24
  L_read_string25
  L_read_string26
  L_INT0_Interrupt27
  L_INT1_Interrupt28
  L_main29
  L_main30
  L_main31
  L_main32
  L_main33
  L_main34
  L_main35
  L_main36
  L_main37
  L_main38
  L_main39
  L_main40
  L_main41
  L_main42
  L_main43
  L_main44
  L_main45
  L_main46
  L_main47
  L_main48
  L_main49
  L_main50
  L__main51
  L__main52
  L__main53
  _DelayMs
  L__DelayMs54
  _show_string
  _move_left_string
  _move_right_string
  _reset_string
  _len
  _clear_string
  _write_string
  _read_string
  _Timer1InterruptHandler
  _INT0_Interrupt
  _INT1_Interrupt
  _main
  L__main55
